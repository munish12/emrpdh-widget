{"version":3,"file":"static/js/912.ec57f0cc.chunk.js","mappings":"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","sources":["app/utils/mcoUtils/dropdownValidation.js","app/utils/mcoUtils/utilities.js"],"sourcesContent":["/*global console*/\r\nimport { Store } from \"app/redux/Store\";\r\nimport { MCOService } from 'services/mcoService';\r\nimport errorMessages from './errorMessages.json';\r\nimport { formatMessage } from \"./commonUtils\";\r\n// import { useGetTemplateMappings } from '../../../hooks/mcoHooks/useGetTemplateMappings';\r\n\r\nconst findMRTemplateByPart = (mrLists = {}, partInfo = null) => {\r\n    if (Object.keys(mrLists).includes(partInfo.name)) {\r\n        return mrLists[partInfo.name][0];\r\n    } else {\r\n        return {};\r\n    }\r\n\r\n    // return mrLists?.find((fitem) => {\r\n    //     return fitem?.partAndPlant.includes(partInfo.name);\r\n    // });\r\n}\r\nconst findBusinessUnitByPlant = (buLists, businessUnit = null) => {\r\n    return buLists?.find((fitem) => {\r\n        return fitem?.businessUnit === businessUnit;\r\n    });\r\n}\r\nconst whereUsedChecks = (whereUsedLists, MCOPlantName) => {\r\n    return whereUsedLists?.filter((fitem) => {\r\n        return (fitem?.makeOrBuy?.toLowerCase()) === \"make\" && fitem?.plantName === MCOPlantName;\r\n    }) || [];\r\n}\r\n\r\nconst getHighestSeqCurrentPendingOrActiveMRForPart = (partName = \"\") => {\r\n    const getStorevalue = Store.getState();\r\n    const mrDetails = getStorevalue?.mcoDetails?.mrDetails || [];\r\n    const retunedMRS = Object.keys(mrDetails?.getHighestSeqCurrentPendingOrActiveMR)?.includes(partName) ? mrDetails?.getHighestSeqCurrentPendingOrActiveMR[partName] : [];\r\n    retunedMRS.forEach(eachMR => {\r\n        eachMR.plantName = eachMR.partAndPlant.split('_')[1];\r\n    })\r\n    return retunedMRS || [];\r\n}\r\nconst getChildPartDetails = async (responseData) => {\r\n    let collectChildParts = {};\r\n    let collectWhereUsedInParts = {};\r\n    responseData?.mcoaffectedItem.forEach((eachChildItem) => {\r\n        let collectChildPartName = [];\r\n        eachChildItem?.childInfo?.forEach(eachparts => {\r\n            const partsDetailsArr = eachparts.split(\"|\");\r\n            collectChildPartName.push({\r\n                \"partAndPlant\": `${partsDetailsArr[1]}_${responseData?.mcoPropeties?.plantName}`,\r\n                \"plantName\": `${responseData?.mcoPropeties?.plantName}`,\r\n                \"partName\": `${partsDetailsArr[1]}`,\r\n                \"partId\": `${partsDetailsArr[3]}`,\r\n                \"revision\": `${partsDetailsArr[2]}`\r\n            });\r\n        });\r\n        collectChildParts[eachChildItem?.name] = collectChildPartName;\r\n\r\n        let collectUsedInPartName = [];\r\n        eachChildItem?.whereUsedInfo?.forEach(whereUsedparts => {\r\n            const whereUsedpartsDetailsArr = whereUsedparts.split(\"|\");\r\n            collectUsedInPartName.push({\r\n                \"partAndPlant\": `${whereUsedpartsDetailsArr[1]}_${responseData?.mcoPropeties?.plantName}`,\r\n                \"plantName\": `${responseData?.mcoPropeties?.plantName}`,\r\n                \"partName\": `${whereUsedpartsDetailsArr[1]}`,\r\n                \"partId\": `${whereUsedpartsDetailsArr[3]}`,\r\n                \"revision\": `${whereUsedpartsDetailsArr[2]}`\r\n            });\r\n        });\r\n        collectWhereUsedInParts[eachChildItem?.name] = collectUsedInPartName;\r\n    });\r\n    const mcoService = new MCOService();\r\n    let instanceVal = localStorage.getItem('instance');\r\n    let childDetailsInfoResponse = await mcoService.getChildPartDetails({\r\n        childParts: collectChildParts,\r\n        whereUsedInParts: collectWhereUsedInParts,\r\n        instance: instanceVal\r\n    });\r\n\r\n    return childDetailsInfoResponse;\r\n}\r\nconst checkTemplateExists = (eachItem, onMBOM_NoTemplatesList, currPartChilddetails, collectErrors, plantName) => {\r\n    if (!(currPartChilddetails.length)) {\r\n        collectErrors.push(`${eachItem.name} - highest child template not exist in MR details table. throw error`);\r\n    }\r\n    const slChildrenWithoutMR = [];\r\n    const slChildNotAllowedOnMBOM = [];\r\n    eachItem?.childInfo.forEach((cfitem) => {\r\n        const childDetailsArr2 = cfitem.split(\"|\");\r\n        const childPartName = childDetailsArr2[1];\r\n        const mrData = currPartChilddetails.find((fitem) => {\r\n            return fitem?.partName.includes(childPartName)\r\n        })\r\n        if (!mrData || (mrData && (!mrData.template || mrData.template === \"Unassigned\"))) {\r\n            slChildrenWithoutMR.push(`${childPartName} : ${plantName}`);\r\n            // collectErrors.push(`${eachItem.name} - highest child template not exist in MR details table. throw error`);//slChildrenWithoutMR\r\n        } else {\r\n            const tempExist2 = onMBOM_NoTemplatesList.map(eachTempRec => eachTempRec.details?.ALLOWABLE_ORG_TEMPLATES).includes(mrData?.template)\r\n            if (tempExist2) {\r\n                slChildNotAllowedOnMBOM.push(`${childPartName} : ${plantName}`);\r\n                //collectErrors.push(`${eachItem.name} - child template not exist in onMBOM_NoTemplatesList on ORGALLOWEDTEMPLATE. throw error`);//slChildNotAllowedOnMBOM\r\n            }\r\n        }\r\n    });\r\n    if (slChildrenWithoutMR?.length) {\r\n        const childMessage = slChildrenWithoutMR?.join('\\n');\r\n        const msgtemplate = errorMessages?.messages?.validationMessages.CHILD_PART_MR_NOT_ASSIGNED;\r\n        const msgReplacementArr = [eachItem?.name, childMessage];\r\n        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n        collectErrors.push(formattedMessage);\r\n    }\r\n\r\n    if (slChildNotAllowedOnMBOM?.length) {\r\n        const childMessage = slChildNotAllowedOnMBOM.join('\\n');\r\n        const msgtemplate = errorMessages?.messages?.validationMessages?.NotAllowedOnMBOMChildren;\r\n        const msgReplacementArr = [eachItem?.displayType, eachItem?.name, childMessage];\r\n        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n        collectErrors.push(formattedMessage);\r\n    }\r\n    return collectErrors;\r\n}\r\n\r\nconst getMVONotAllowedToHaveEBOMValues = (templateMappingsInfo, businessUnit = \"\",) => {\r\n    \r\n    const finalTemplates = templateMappingsInfo.filter((item1) => {\r\n        return item1.MappingType === 'orgallowedvalues' && item1.BUID === businessUnit && item1?.details?.EBOM_Allowed?.toUpperCase() === 'N';\r\n    }).map(titem => {\r\n        return titem?.details?.ALLOWABLE_ORG_TEMPLATES;\r\n    }) || [];\r\n    return finalTemplates;\r\n}\r\n\r\nconst primaryToPurchageValidationMapping = (templateMappingsInfo = \"\", businessUnit = \"\") => {\r\n    const purchageValidationMapping = templateMappingsInfo.find((item1) => {\r\n        return item1.MappingType === 'buplantmapping' && item1.BUID === businessUnit && item1?.details?.Entity.toUpperCase() === 'NONE OR PO ORG';\r\n    });\r\n    if (purchageValidationMapping && Object.keys(purchageValidationMapping).length) {\r\n        const primaryToPurchagePlants = purchageValidationMapping.details?.PLANT;\r\n        Object.keys(primaryToPurchagePlants).forEach(eachKey => {\r\n            if (primaryToPurchagePlants[eachKey] === 'None' || primaryToPurchagePlants[eachKey] === '') {\r\n                delete primaryToPurchagePlants[eachKey];\r\n            }\r\n        })\r\n        return primaryToPurchagePlants;\r\n    } else {\r\n        return {};\r\n    }\r\n}\r\n\r\nconst groupByValues = (anyObject) => {\r\n    const purchagetoPrimaryMap = new Map();\r\n    let purchageValue = '';\r\n    Object.keys(anyObject)?.map(eachKey => {\r\n        purchageValue = anyObject[eachKey];\r\n        if (purchagetoPrimaryMap.has(purchageValue)) {\r\n            const value = purchagetoPrimaryMap.get(purchageValue)\r\n            purchagetoPrimaryMap.set(purchageValue, [...value, eachKey])\r\n        } else {\r\n            purchagetoPrimaryMap.set(purchageValue, [eachKey])\r\n        }\r\n    })\r\n    return purchagetoPrimaryMap;\r\n}\r\n\r\nconst purchageToPrimaryValidationMapping = (templateMappingsInfo = [], businessUnit = '') => {\r\n    let primaryToPurchageValidation = primaryToPurchageValidationMapping(templateMappingsInfo, businessUnit);\r\n    return groupByValues(primaryToPurchageValidation);\r\n}\r\n\r\nconst getRDOOUOrgSetMappings = (templateMappingsInfo = '', businessUnit = '', plantToMatch) => {\r\n    let buplantmapping_RDOChecks = templateMappingsInfo?.find((acitem) => {\r\n        return acitem.MappingType === 'buplantmapping' && acitem.BUID === businessUnit && acitem?.details?.Entity.toUpperCase() === 'RDO OU ORG SET';\r\n    });\r\n\r\n    buplantmapping_RDOChecks = (buplantmapping_RDOChecks && Object.keys(buplantmapping_RDOChecks).length) ? buplantmapping_RDOChecks?.details?.PLANT : {};\r\n\r\n    let plantGroups = templateMappingsInfo?.find((item1) => {\r\n        return item1.MappingType === 'buplantmapping' && item1.BUID === businessUnit && item1?.details?.Entity.toUpperCase() === 'PLANTGROUP';\r\n    });\r\n    plantGroups = (plantGroups && Object.keys(plantGroups).length) ? plantGroups?.details?.PLANT : {};\r\n\r\n    const OUgroupMap = groupByValues(plantGroups);\r\n\r\n    let matchedPlantsSet = []\r\n    OUgroupMap.forEach((values, key) => {\r\n        const filteredPlants = values?.filter(plant => buplantmapping_RDOChecks && buplantmapping_RDOChecks[plant] && buplantmapping_RDOChecks[plant].toLowerCase() === 'yes')\r\n        if (filteredPlants?.includes(plantToMatch)) {\r\n            matchedPlantsSet = filteredPlants;\r\n            return matchedPlantsSet;\r\n        }\r\n    })\r\n    return matchedPlantsSet;\r\n}\r\n\r\nconst getOrgAllowedTemplateMappingForPlant = (templateMappingsInfo, businessUnit = \"\", plant = \"\", partType = \"\") => {\r\n    let finalTemplates = [];\r\n    const orgAllowedTemplatesForPlant = templateMappingsInfo.filter((item1) => {\r\n        return item1.MappingType === 'orgallowedvalues' && item1.BUID === businessUnit && Object.keys(item1?.details?.Plants).includes(plant.toUpperCase()) && item1?.details?.Plants[plant.toUpperCase()] === \"Y\";\r\n    }) || [];\r\n    const getPartTypeDetails = templateMappingsInfo.filter((item1) => {\r\n        return item1.MappingType === 'parttypetotemplate' && item1.BUID === businessUnit;\r\n    }) || [];\r\n    const parttypetotemplateArr = getPartTypeDetails.filter((item1) => {\r\n        return item1.details.ENGG_ITEM_TYPE === partType;\r\n    }) || [];\r\n    let templatesMappingsArr = [];\r\n    if (parttypetotemplateArr.length) {\r\n        orgAllowedTemplatesForPlant.forEach((item1) => {\r\n            const getPlantBasedList = parttypetotemplateArr[0]?.details?.allowableOrgTemplates.filter((item2) => {\r\n                return item2.org_allowed_template === item1?.details?.ALLOWABLE_ORG_TEMPLATES;\r\n            }) || [];\r\n            if (getPlantBasedList.length) {\r\n                templatesMappingsArr.push(item1);\r\n            }\r\n        });\r\n    } else {\r\n        const flatenPartTypeTemplates = getPartTypeDetails?.map(partTypeTemplate => partTypeTemplate.details?.allowableOrgTemplates)?.flat();\r\n        const templatesForAllTypes = flatenPartTypeTemplates?.filter(eachRec => eachRec.exclusive_use?.toLowerCase() === 'yes')?.map(template => template.org_allowed_template)\r\n        templatesMappingsArr = orgAllowedTemplatesForPlant?.filter(eachTemplate => !(templatesForAllTypes?.includes(eachTemplate?.details?.ALLOWABLE_ORG_TEMPLATES)))\r\n    }\r\n\r\n    if (templatesMappingsArr.length) {\r\n        finalTemplates = templatesMappingsArr?.map((tItem) => {\r\n            return tItem?.details?.ALLOWABLE_ORG_TEMPLATES\r\n        });\r\n    }\r\n    return finalTemplates;\r\n}\r\n\r\nconst getFromTOmvoAllowedChangesOracleTemplates = ({ templateMappingsInfo, businessUnit = \"\", plant = \"\", prevTemplateName = \"\" }) => {\r\n    let finalTemplates = [];\r\n    const fromTOmvoAllowedChangesOracleTemplates = templateMappingsInfo.filter((item1) => {\r\n        return item1.MappingType === 'mvoallowedchanges' && item1.BUID === businessUnit && item1?.details?.MVO_TEMPLATE_FROM === prevTemplateName;\r\n    }) || [];\r\n\r\n    if (fromTOmvoAllowedChangesOracleTemplates.length) {\r\n        finalTemplates = fromTOmvoAllowedChangesOracleTemplates[0]?.details?.MVO_TEMPLATES_TO?.map((tItem) => {\r\n            return tItem.MVO_TEMPLATE_TO\r\n        }) || []\r\n    }\r\n    return finalTemplates;\r\n}\r\n\r\nconst getMVOTemplateCompatibilityOracleTemplates = ({ templateMappingsInfo, businessUnit = \"\", plant = \"\", templateName = \"\" }) => {\r\n    let finalTemplates = [];\r\n    const MVOTemplateCompatibilityOracleTemplates = templateMappingsInfo.filter((item1) => {\r\n        return item1.MappingType === 'mvoTemplateCompatibility' && item1.BUID === businessUnit && item1?.details?.MVO_TEMPLATE_OPTION === templateName;;\r\n    }) || [];\r\n\r\n    if (MVOTemplateCompatibilityOracleTemplates.length) {\r\n        finalTemplates = MVOTemplateCompatibilityOracleTemplates[0]?.details?.allowableOrgTemplates?.filter(fiItem => fiItem.status?.toLowerCase() === 'active')?.map((tItem) => {\r\n            return tItem.ALLOWABLE_ORG_TEMPLATE\r\n        }) || []\r\n    }\r\n    return finalTemplates;\r\n}\r\n\r\nconst getMustBeAssignedToPurchaseValidationPlantList = (templateMappingsInfo = '', businessUnit = \"\") => {\r\n\r\n    const finalTemplates = templateMappingsInfo.filter((item1) => {\r\n        return item1.MappingType === 'orgallowedvalues' && item1.BUID === businessUnit && item1?.details?.PO_Org_Exist_Check?.toUpperCase() === 'Y';\r\n    }) || [];\r\n\r\n    return finalTemplates;\r\n}\r\n\r\n// const getRDOOUOrgSetMappings = (templateMappingsInfo = '', businessUnit = \"\", plantNameToMatch) => {\r\n//     const buplantmappingRecords = templateMappingsInfo.find((item1) => {\r\n//         return item1.MappingType === 'buplantmapping' && item1.BUID === businessUnit && item1?.details?.Entity.toUpperCase() === 'RDO OU ORG SET';\r\n//     });\r\n\r\n//     const RDOOUOrgSetMappings = buplantmappingRecords ? buplantmappingRecords?.details?.PLANT : null;\r\n//     const plantPairWithYes = [];\r\n//     if (RDOOUOrgSetMappings && (RDOOUOrgSetMappings[plantNameToMatch] && RDOOUOrgSetMappings[plantNameToMatch] !== undefined)) {\r\n//         Object.keys(RDOOUOrgSetMappings).map(eachKey => {\r\n//             if (RDOOUOrgSetMappings[eachKey]?.toUpperCase() === 'YES') {\r\n//                 plantPairWithYes.push(eachKey)\r\n//             }\r\n//         })\r\n//     }\r\n//     return plantPairWithYes;\r\n// }\r\n\r\nconst getSetCompatibleTemplates = (templateMappingsInfo = '', businessUnit = \"\", templateName) => {\r\n    let finalTemplates = []\r\n    const getMappedTemplatesList = templateMappingsInfo.filter((item1) => {\r\n        return item1.MappingType === 'setcompatibletemplates' && item1.BUID === businessUnit && item1?.details?.TEMPLATE_ORG_EXISTING === templateName;\r\n    }) || [];\r\n    if (getMappedTemplatesList.length) {\r\n        finalTemplates = getMappedTemplatesList[0]?.details?.TEMPLATE_ORG_MODIFYING?.map((tItem) => {\r\n            return tItem.TEMPLATE_ORG_MODIFYING\r\n        })\r\n    }\r\n    return finalTemplates;\r\n}\r\n// error message related code\r\n\r\n\r\nconst dropdownValidation = async (responseData) => {\r\n    const getStorevalue = Store.getState();\r\n    const templateList = getStorevalue.mcoDetails.templates || [];\r\n    const orgAllowedTemplateMappingsList = getStorevalue.mcoDetails.ORGAllowedTemplateMappings || [];\r\n    const templateMappingsInfo = getStorevalue.mcoDetails.templateMappingsInfo || [];\r\n    const businessUnitInfo = getStorevalue.mcoDetails.businessUnitList || [];\r\n    const mrDetails = getStorevalue.mcoDetails.mrDetails || [];\r\n\r\n    let combineAllErrors = [];\r\n    const childPartAndWhereUsedMRDetails = await getChildPartDetails(responseData);\r\n\r\n    responseData?.mcoaffectedItem.forEach((eachItem) => {\r\n        let collectErrors = [];\r\n        const currentPartBuInfo = findBusinessUnitByPlant(businessUnitInfo[responseData?.mcoPropeties?.name], eachItem?.organization);\r\n        const mcoData = responseData.mcoPropeties;\r\n        const MCOPlantName = mcoData?.plantName;\r\n        const partTypeDisplayName = eachItem?.displayType;\r\n        const activeMRInfo = findMRTemplateByPart(mrDetails?.activeMR, eachItem) || {};\r\n        const previousSeqMRInfo = findMRTemplateByPart(mrDetails?.previousSeqMR, eachItem) || {};\r\n        const getHighestSeqCurrentOrActiveMR = findMRTemplateByPart(mrDetails?.getHighestSeqCurrentOrActiveMR, eachItem) || {};\r\n\r\n        let whereUsedMRinfo = null;\r\n        if (Object.keys(childPartAndWhereUsedMRDetails?.whereUsedInParts).includes(eachItem?.name)) {\r\n            whereUsedMRinfo = whereUsedChecks(childPartAndWhereUsedMRDetails?.whereUsedInParts[eachItem?.name], MCOPlantName);\r\n        }\r\n\r\n        let bHasPrependingActiveMRs = false;\r\n        if (activeMRInfo?.ERPStatus?.toLowerCase() === 'active') {\r\n            bHasPrependingActiveMRs = true;\r\n        }\r\n        let MVOOracleTemplate = '';\r\n        // Is current template is unassigned? If unassigned then throw error.\r\n        if (activeMRInfo.template === undefined || activeMRInfo.template === \"\") {\r\n            // for error handling \r\n            const msgtemplate = errorMessages.messages.validationMessages.TEMPLATE_UNASSIGN;\r\n            const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n            const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n            collectErrors.push(`${formattedMessage} ${responseData?.mcoPropeties?.plantName}`);\r\n        }\r\n        if ((Number(activeMRInfo?.sequence)) === 1 && Object.keys(previousSeqMRInfo).length) {\r\n            activeMRInfo.sequence = previousSeqMRInfo?.sequence + 1;\r\n        }\r\n        if ((activeMRInfo.sequence > 1 && (activeMRInfo?.template !== previousSeqMRInfo?.template)) || !(activeMRInfo.sequence > 1)) {\r\n            // Is template is in oracle existing template and Part revision format is not compatible then throws error.\r\n            const skip_partRevision = true;\r\n\r\n            const pattern = /^\\d{2}$/;\r\n            const matches = eachItem?.revision?.match(pattern);\r\n            const getCurrentPartBuInfo = findBusinessUnitByPlant(businessUnitInfo[responseData?.mcoPropeties?.name], eachItem?.organization)\r\n            const sAnyItemOracleExisting = getCurrentPartBuInfo?.oracleExisting?.some(etemplate => etemplate === activeMRInfo.template);\r\n            if (sAnyItemOracleExisting && matches) {\r\n                // for error handling \r\n                const msgtemplate = errorMessages.messages.validationMessages.REV_NOT_COMPATIBLE_WITH_ORACLE_EXISTING;\r\n                const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n                const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                collectErrors.push(`${formattedMessage} ${responseData?.mcoPropeties?.plantName}`);\r\n            }\r\n        }\r\n\r\n        // return if we have errors already\r\n        // if (collectErrors.length) {\r\n        //     combineAllErrors = [...combineAllErrors, ...collectErrors];\r\n        //     return;\r\n        // }\r\n\r\n        if (activeMRInfo.sequence > 1) {\r\n            // If both oracle templates are not equal and ERP status is Inactive then it throws error.\r\n            if (activeMRInfo?.template !== previousSeqMRInfo?.template && activeMRInfo?.ERPStatus?.toLowerCase() === \"inactive\") {\r\n                const msgtemplate = errorMessages.messages.validationMessages.CHANGE_ORACLE_TEMPLATE_ON_INACTIVE;\r\n                const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n                const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                collectErrors.push(`${formattedMessage} ${responseData?.mcoPropeties?.plantName}`);\r\n            }\r\n\r\n            // If previous ERP status is Active and Current ERP Status is Inactive then need to check for Part where used,\r\n            //  if Part where used is greater than 0 throw error.\r\n            if (previousSeqMRInfo?.ERPStatus?.toLowerCase() === \"active\" && activeMRInfo?.ERPStatus?.toLowerCase() === \"inactive\") {\r\n                if (eachItem?.whereUsedInfo?.length > 0 && whereUsedMRinfo?.length > 0) {//where used check If where used info is exist then throw rror\r\n                    const whereUsedParts = whereUsedMRinfo.map(eachMR => eachMR.partName).join(',');\r\n                    const msgtemplate = errorMessages.messages.validationMessages.MBOM_STILL_USED_ON;\r\n                    const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n                    const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                    collectErrors.push(`${formattedMessage} \\n ${MCOPlantName} : ${whereUsedParts}`);\r\n                }\r\n            }\r\n        }\r\n\r\n        // return if we have errors already\r\n        // if (collectErrors.length) {\r\n        //     return { valid: false, errDesc: collectErrors };\r\n        // }\r\n\r\n        if ((activeMRInfo?.ERPStatus?.toLowerCase()) === \"active\") {\r\n            if ((activeMRInfo.sequence > 1 && (activeMRInfo?.template !== previousSeqMRInfo?.template)) || !(activeMRInfo.sequence > 1)) {\r\n                // Check Oracle template is exist in NotAllowedOnMBOMTemplateList then (BU and onMBOM==no)\r\n                // If part is used in any MBOM by checking part WhereUsedinPlant then error like template not allowed (WhereUsedinPlant!=0 throw error)\r\n                const onMBOM_NoTemplatesList = orgAllowedTemplateMappingsList?.filter((tmitem) => {\r\n                    return tmitem?.details?.On_MBOM === \"N\"\r\n                });\r\n                const IstempExists_onMBOM_NoTemplatesList = onMBOM_NoTemplatesList?.find(etemp => {\r\n                    return etemp?.details?.ALLOWABLE_ORG_TEMPLATES === activeMRInfo?.template;\r\n                });\r\n\r\n                if (IstempExists_onMBOM_NoTemplatesList && eachItem?.whereUsedInfo?.length > 0 && whereUsedMRinfo?.length > 0) {\r\n                    const whereUsedParts = whereUsedMRinfo.map(eachMR => eachMR.partName).join(',');\r\n                    const msgtemplate = errorMessages.messages.validationMessages.MBOM_STILL_USED_ON;\r\n                    const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n                    const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                    collectErrors.push(`${formattedMessage} \\n ${MCOPlantName} : ${whereUsedParts}`);\r\n                }\r\n\r\n                if (activeMRInfo?.makeOrBuy === \"make\") {\r\n\r\n                    if (!(eachItem?.childInfo?.length) && !(currentPartBuInfo?.makeWithoutBOMList?.includes(activeMRInfo?.template))) {\r\n                        const msgtemplate = errorMessages.messages.validationMessages.HAS_MBOM_WITH_NO_CHILDREN;\r\n                        const msgReplacementArr = [partTypeDisplayName, eachItem?.name, MCOPlantName];\r\n                        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                        collectErrors.push(formattedMessage);\r\n                    } else if (eachItem?.childInfo?.length) {\r\n                        collectErrors = checkTemplateExists(eachItem, onMBOM_NoTemplatesList, childPartAndWhereUsedMRDetails?.childParts[eachItem?.name], collectErrors, MCOPlantName);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // return if we have errors already\r\n        if (collectErrors.length) {\r\n            combineAllErrors = [...combineAllErrors, ...collectErrors];\r\n            return;\r\n        }\r\n\r\n        // if any errors in this stage just throw and skip the remaining process\r\n        if (MCOPlantName === 'MVO') {\r\n            if ((activeMRInfo?.ERPStatus?.toLowerCase()) === 'active') {\r\n                if ((activeMRInfo.sequence > 1 && (activeMRInfo?.template !== previousSeqMRInfo?.template)) || !(activeMRInfo.sequence > 1)) {\r\n                    const mvoAllowedTemplates = getOrgAllowedTemplateMappingForPlant(templateMappingsInfo, mcoData.businessUnit, MCOPlantName, eachItem?.displayType);\r\n                    if (mvoAllowedTemplates?.includes(activeMRInfo?.template)) {\r\n                        let bMVOTemplateFromToIsAllowed = true;\r\n                        if (activeMRInfo.sequence > 1) {\r\n                            const fromToMVOAllowedChanges = getFromTOmvoAllowedChangesOracleTemplates({\r\n                                templateMappingsInfo,\r\n                                businessUnit: mcoData.businessUnit,\r\n                                plant: 'MVO',\r\n                                prevTemplateName: previousSeqMRInfo?.template\r\n                            });\r\n                            if (!(fromToMVOAllowedChanges.includes(activeMRInfo?.template)) && (activeMRInfo?.template !== previousSeqMRInfo?.template)) {\r\n                                bMVOTemplateFromToIsAllowed = false;\r\n                                const msgtemplate = errorMessages.messages.validationMessages.FromToNotAllowed;\r\n                                const msgReplacementArr = [partTypeDisplayName, eachItem?.name, MCOPlantName, activeMRInfo?.template, previousSeqMRInfo?.template];\r\n                                const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                                collectErrors.push(formattedMessage);\r\n                                // throw error that current mvo template is not allowed slTemplateFromToNotAllowed\r\n                            }\r\n                        }\r\n                        if (bMVOTemplateFromToIsAllowed) {\r\n                            const mvoTemplateCompatibleTemplates = getMVOTemplateCompatibilityOracleTemplates({ templateMappingsInfo, businessUnit: mcoData.businessUnit, plant: \"\", templateName: activeMRInfo?.template });\r\n                            const currentMVOOracleTemplate = activeMRInfo?.template;\r\n                            let mvoTemplateCompatible = true;\r\n                            getHighestSeqCurrentPendingOrActiveMRForPart(eachItem.name).forEach(eachMR => {\r\n                                if (eachMR.plantName !== 'MVO') {\r\n                                    if (eachMR.template && eachMR.template !== \"Unassigned\" && !(mvoTemplateCompatibleTemplates.includes(eachMR.template))) {\r\n                                        mvoTemplateCompatible = false\r\n                                        const msgtemplate = errorMessages.messages.validationMessages.NotCompatible;\r\n                                        const msgReplacementArr = [partTypeDisplayName, eachItem?.name, eachMR.template, MCOPlantName, currentMVOOracleTemplate];\r\n                                        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                                        collectErrors.push(formattedMessage);\r\n                                    }\r\n                                }\r\n                            })\r\n                            if (mvoTemplateCompatible) {\r\n                                const mvoNotAllowedToHaveEBOM = getMVONotAllowedToHaveEBOMValues(templateMappingsInfo, mcoData.businessUnit);\r\n                                if (mvoNotAllowedToHaveEBOM.includes(activeMRInfo?.template)) {\r\n                                    if (eachItem.childInfo.length > 0) {\r\n                                        //throw error that template is not allowed to have EBOM 3799\r\n                                        const msgtemplate = errorMessages.messages.validationMessages.NotAllowedToHaveEBOM;\r\n                                        const msgReplacementArr = [partTypeDisplayName, eachItem?.name, currentMVOOracleTemplate];\r\n                                        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                                        collectErrors.push(formattedMessage);\r\n                                    }\r\n                                }\r\n\r\n\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        //throw error that template does not contains in mvo allowed templates\r\n                        const msgtemplate = errorMessages.messages.validationMessages.NotAllowedMVO;\r\n                        const msgReplacementArr = [partTypeDisplayName, eachItem?.name, activeMRInfo?.template];\r\n                        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                        collectErrors.push(formattedMessage);\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                //MVO ERP status not active rules here\r\n                // 3797 rules should be added here\r\n                const allPlantsWithActiveMR = []\r\n                getHighestSeqCurrentPendingOrActiveMRForPart(eachItem.name).forEach(eachMR => {\r\n                    if (eachMR.plantName !== 'MVO') {\r\n                        allPlantsWithActiveMR.push(eachMR.plantName);\r\n                    }\r\n                })\r\n                const msgtemplate = errorMessages.messages.validationMessages.StillActiveInOtherPlants;\r\n                const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n                const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                collectErrors.push(`${formattedMessage} ${allPlantsWithActiveMR.join(',')}`);\r\n            }\r\n        } else {\r\n            // rule of 3815 need to added here\r\n            //gethighest sequence current or Active MR details and get the status of MVO plant \r\n            MVOOracleTemplate = getHighestSeqCurrentOrActiveMR?.template;\r\n            if (bHasPrependingActiveMRs) {\r\n                if (!MVOOracleTemplate) {\r\n                    //throw error that \r\n                    const msgtemplate = errorMessages.messages.validationMessages.MVOMRNotCurrentOrOnThisECOMessage;\r\n                    const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n                    const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                    collectErrors.push(formattedMessage);\r\n                }\r\n            }\r\n        }\r\n\r\n        // return if we have errors already\r\n        if (collectErrors.length) {\r\n            combineAllErrors = [...combineAllErrors, ...collectErrors];\r\n            return;\r\n        }\r\n\r\n        //Stage 3 code here\r\n        const highestSeqCurrentPendingOrActiveMRForPart = getHighestSeqCurrentPendingOrActiveMRForPart(eachItem.name);\r\n        if (highestSeqCurrentPendingOrActiveMRForPart && highestSeqCurrentPendingOrActiveMRForPart.length > 0) {\r\n            let allowedOracleTemplateValues = [];\r\n            let mvoTemplateCompatibleTemplates = \"\";\r\n            const sOracleTemplate = activeMRInfo?.template;\r\n            const currentMRSequence = Number(activeMRInfo.sequence);\r\n            if (bHasPrependingActiveMRs) {\r\n                mvoTemplateCompatibleTemplates = getMVOTemplateCompatibilityOracleTemplates({ templateMappingsInfo, businessUnit: mcoData.businessUnit, plant: \"\", templateName: MVOOracleTemplate });\r\n            }\r\n            if (MCOPlantName !== 'MVO' && ((activeMRInfo?.ERPStatus?.toLowerCase()) === \"active\") && ((activeMRInfo.sequence > 1 && (activeMRInfo?.template !== previousSeqMRInfo?.template)) || !(activeMRInfo.sequence > 1))) {\r\n                const partMakeOrBuyValue = activeMRInfo?.makeOrBuy;\r\n\r\n                const getCurrentPartBuInfo = findBusinessUnitByPlant(businessUnitInfo[responseData?.mcoPropeties?.name], eachItem?.organization)\r\n                const checkIsplantExistOrNot = getCurrentPartBuInfo?.plants.find(buPlant => buPlant?.plantName === MCOPlantName);\r\n                if (((partMakeOrBuyValue.toLowerCase()) === 'make') && !checkIsplantExistOrNot) {\r\n                    const msgtemplate = errorMessages.messages.validationMessages.MakeInNonRDOPlant;\r\n                    const msgReplacementArr = [partTypeDisplayName, eachItem?.name, MCOPlantName];\r\n                    const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                    collectErrors.push(formattedMessage);\r\n                }\r\n                const orgAllowedTemplates = getOrgAllowedTemplateMappingForPlant(templateMappingsInfo, mcoData.businessUnit, MCOPlantName, eachItem?.displayType);\r\n                allowedOracleTemplateValues = mvoTemplateCompatibleTemplates.filter(eachTemplate => orgAllowedTemplates.includes(eachTemplate))\r\n                // primary purchage Validation checks\r\n                const primaryToPurchageMapping = primaryToPurchageValidationMapping(templateMappingsInfo, mcoData.businessUnit);\r\n                const mustBeAssignedToPurchageValidationPlant = getMustBeAssignedToPurchaseValidationPlantList(templateMappingsInfo, mcoData.businessUnit);\r\n                const mustBeAssignedToPurchageValidationPlantTemplates = mustBeAssignedToPurchageValidationPlant.map(eachRecord => eachRecord?.details?.ALLOWABLE_ORG_TEMPLATES);\r\n\r\n                const purchagetoPrimaryMap = purchageToPrimaryValidationMapping(templateMappingsInfo, mcoData.businessUnit);\r\n                if (!(purchagetoPrimaryMap.has(MCOPlantName))) {\r\n                    if (allowedOracleTemplateValues && sOracleTemplate && !(allowedOracleTemplateValues.includes(sOracleTemplate))) {\r\n                        //MVOOracleTemplate, sOracleTemplate MCOPlantName\r\n                        const msgtemplate = errorMessages.messages.validationMessages.NotCompatibleOrAllowed;\r\n                        const msgReplacementArr = [partTypeDisplayName, eachItem?.name, sOracleTemplate, MCOPlantName, MVOOracleTemplate];\r\n                        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                        collectErrors.push(formattedMessage);\r\n                        // throw the error that MVOOracleTemplate and sOracleTemplate are not compatible for plant 4041\r\n                    }\r\n                    if (Object.keys(primaryToPurchageMapping).includes(MCOPlantName)) {\r\n                        if (sOracleTemplate && mustBeAssignedToPurchageValidationPlantTemplates.includes(sOracleTemplate)) {\r\n                            const purchagePlant = primaryToPurchageMapping[MCOPlantName];\r\n                            if (purchagePlant !== \"None\") {\r\n                                const hasMRForPurchagePlant = highestSeqCurrentPendingOrActiveMRForPart.find(eachMR => purchagePlant === eachMR.partAndPlant.split('_')[1])\r\n                                if (!hasMRForPurchagePlant) {\r\n                                    //throw error Not assigned to purchage validation plant 4060\r\n                                    // MCOPlantName sOracleTemplate purchagePlant\r\n                                    const msgtemplate = errorMessages.messages.validationMessages.NotAssignedToPurchaseValidationPlant;\r\n                                    const msgReplacementArr = [partTypeDisplayName, eachItem?.name, MCOPlantName, sOracleTemplate, purchagePlant];\r\n                                    const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                                    collectErrors.push(formattedMessage);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    let isAssignedToPrimary = false;\r\n                    if (currentMRSequence === 1) {\r\n                        if (allowedOracleTemplateValues && sOracleTemplate && !(allowedOracleTemplateValues.includes(sOracleTemplate))) {\r\n                            // throw the error that MVOOracleTemplate and sOracleTemplate are not compatible for plant 4087\r\n                            const msgtemplate = errorMessages.messages.validationMessages.NotCompatibleOrAllowed;\r\n                            const msgReplacementArr = [partTypeDisplayName, eachItem?.name, sOracleTemplate, MCOPlantName, MVOOracleTemplate];\r\n                            const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                            collectErrors.push(formattedMessage);\r\n                        }\r\n\r\n                        const getCurrentPartBuInfo = findBusinessUnitByPlant(businessUnitInfo[responseData?.mcoPropeties?.name], eachItem?.organization)\r\n                        const sAnyItemOracleExisting = getCurrentPartBuInfo?.oracleExisting?.some(etemplate => etemplate === sOracleTemplate);\r\n                        if (!sAnyItemOracleExisting) {// need to write this check again\r\n                            const primaryPlants = purchagetoPrimaryMap.get(MCOPlantName);\r\n                            primaryPlants?.forEach(eachPrimary => {\r\n                                const hasMR = highestSeqCurrentPendingOrActiveMRForPart.find(eachMR => eachPrimary === eachMR.partAndPlant.split('_')[1])\r\n                                if (hasMR) {\r\n                                    isAssignedToPrimary = true;\r\n                                }\r\n                            })\r\n                            if (!isAssignedToPrimary) {\r\n                                const primaryPlantsStr = primaryPlants.join(\" or \");\r\n                                //MCOPlantName primaryPlantsStr\r\n                                const msgtemplate = errorMessages.messages.validationMessages.NotAssignedToPrimaryPlant;\r\n                                const msgReplacementArr = [partTypeDisplayName, eachItem?.name, MCOPlantName, primaryPlantsStr];\r\n                                const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                                collectErrors.push(formattedMessage);\r\n                            }\r\n                        }\r\n\r\n                    } else if (currentMRSequence > 1) {\r\n                        if (mvoTemplateCompatibleTemplates && sOracleTemplate && !(mvoTemplateCompatibleTemplates.includes(sOracleTemplate))) {\r\n                            // throw error that template not compatible 4126\r\n                            const msgtemplate = errorMessages.messages.validationMessages.NotCompatible;\r\n                            const msgReplacementArr = [partTypeDisplayName, eachItem?.name, sOracleTemplate, MCOPlantName, MVOOracleTemplate];\r\n                            const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                            collectErrors.push(formattedMessage);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // return if we have errors already\r\n            if (collectErrors.length) {\r\n                combineAllErrors = [...combineAllErrors, ...collectErrors];\r\n                return;\r\n            }\r\n\r\n            //stage 4 final\r\n            if (MCOPlantName !== 'MVO') {\r\n                // need to write some more code here\r\n                const partBU = eachItem.organization;\r\n                const plantName = MCOPlantName;\r\n                const OracleTemplate = sOracleTemplate;\r\n                const plantPair = getRDOOUOrgSetMappings(templateMappingsInfo, partBU, MCOPlantName);\r\n                if (plantPair?.includes(plantName)) {\r\n                    let templatesFromEachRDOOUPlants = [];\r\n                    let RDOPlanttemplates = [];\r\n                    plantPair?.forEach(eachPlant => {\r\n                        if (eachPlant !== plantName) {\r\n                            const hasMR = highestSeqCurrentPendingOrActiveMRForPart.find(eachMR => eachPlant === eachMR.partAndPlant.split('_')[1])\r\n                            if (hasMR) {\r\n                                const RDOPlantTemplateName = hasMR.template;\r\n                                RDOPlanttemplates = getSetCompatibleTemplates(templateMappingsInfo, partBU, RDOPlantTemplateName);\r\n                                if (RDOPlanttemplates) {\r\n                                    templatesFromEachRDOOUPlants.push(RDOPlanttemplates);\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                    templatesFromEachRDOOUPlants = templatesFromEachRDOOUPlants.flat();\r\n                    if (templatesFromEachRDOOUPlants?.length && !(templatesFromEachRDOOUPlants.includes(OracleTemplate))) {\r\n                        // throw error using this plantPair\r\n                        const msgtemplate = errorMessages.messages.validationMessages.NonMVONotCompatible;\r\n                        const msgReplacementArr = [partTypeDisplayName, eachItem?.name];\r\n                        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                        collectErrors.push(`${formattedMessage} \\n ${plantPair.join('\\n')}`);\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n        if (highestSeqCurrentPendingOrActiveMRForPart && highestSeqCurrentPendingOrActiveMRForPart.length > 0) {\r\n            if ((activeMRInfo.sequence > 1 && (activeMRInfo?.template !== previousSeqMRInfo?.template)) || !(activeMRInfo.sequence > 1)) {\r\n                const mvoNotAllowedToHaveEBOM = getMVONotAllowedToHaveEBOMValues(templateMappingsInfo, mcoData.businessUnit);\r\n                if (mvoNotAllowedToHaveEBOM.includes(activeMRInfo?.template)) {\r\n                    if (eachItem.childInfo.length > 0) {\r\n                        //throw error that template is not allowed to have EBOM\r\n                        const msgtemplate = errorMessages.messages.validationMessages.NotAllowedToHaveEBOM;\r\n                        const msgReplacementArr = [partTypeDisplayName, eachItem?.name, MVOOracleTemplate];\r\n                        const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                        collectErrors.push(formattedMessage);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (collectErrors.length) {\r\n            combineAllErrors = [...combineAllErrors, ...collectErrors];\r\n            return;\r\n        }\r\n    });\r\n\r\n    // collectErrors.push(`Failed.`);\r\n\r\n    if (combineAllErrors.length) {\r\n        return { valid: false, errDesc: combineAllErrors };\r\n    } else {\r\n        return { valid: true, errDesc: '' };\r\n    }\r\n}\r\n\r\nexport {\r\n    dropdownValidation,\r\n    primaryToPurchageValidationMapping,\r\n    getRDOOUOrgSetMappings\r\n}","import { Store } from \"app/redux/Store\";\r\nimport dayjs from 'dayjs';\r\nimport shortId from 'shortid';\r\nimport { MCOService } from 'services/mcoService';\r\nimport { SystemSettingsService } from 'services/systemSettingsService';\r\nimport { update_generalValues, updateMcoDetails } from 'app/redux/actions/MCODetailsAction';\r\nimport { getRDOOUOrgSetMappings } from \"app/utils/mcoUtils/dropdownValidation\";\r\nimport generalInfo from \"app/utils/mcoUtils/generalInfo.json\";\r\nimport errorMessages from './errorMessages.json';\r\nimport { formatMessage } from \"./commonUtils\";\r\nconst instance = localStorage.getItem('instance');\r\nconst fetchRSMEAndRMEDetails = () => {\r\n    const mcoService = new MCOService();\r\n\r\n    return mcoService.getRSMEList().then(getRSMEList => {\r\n        return getRSMEList.map(ritem => {\r\n            const splitValues = ritem.split('|');\r\n            return {\r\n                label: `${splitValues[1]}(${splitValues[0]})`,\r\n                key: splitValues[0],\r\n                id: splitValues[2],\r\n                email: splitValues[3]\r\n            };\r\n        });\r\n    }).then(rsmeList => {\r\n        return mcoService.getRMEList().then(getRMEList => {\r\n            const rmeList = getRMEList.map(ritem => {\r\n                const splitValues = ritem.split('|');\r\n                return {\r\n                    label: `${splitValues[1]}(${splitValues[0]})`,\r\n                    key: splitValues[0],\r\n                    id: splitValues[2],\r\n                    email: splitValues[3]\r\n                };\r\n            });\r\n            return { rsmeList, rmeList };\r\n        });\r\n    }).then(({ rsmeList, rmeList }) => {\r\n        Store.dispatch(update_generalValues({\r\n            RSMEList: rsmeList,\r\n            RMEList: rmeList\r\n        }));\r\n    }).catch(err => {\r\n        Store.dispatch(update_generalValues({\r\n            isPageHavingIssue: true\r\n        }));\r\n        throw err;\r\n    });\r\n};\r\n\r\n\r\nconst CloneDataFromMaster = (locresData, masterAttData) => {\r\n    let new_mcoPropeties = { ...locresData.mcoPropeties };\r\n    const msInformation = masterAttData;\r\n\r\n    if (new_mcoPropeties && (new_mcoPropeties?.startdate === null || new_mcoPropeties?.startdate === '' || new_mcoPropeties?.startdate === \"Unassigned\")) {\r\n        new_mcoPropeties['startdate'] = (msInformation?.mcoProperties?.startdate) ? (msInformation?.mcoProperties?.startdate) : null;\r\n    }\r\n    if (new_mcoPropeties && (new_mcoPropeties?.rme === null || new_mcoPropeties?.rme === '' || new_mcoPropeties?.rme === \"Unassigned\")) {\r\n        new_mcoPropeties['rme'] = (msInformation?.mcoProperties?.rme) ? (msInformation?.mcoProperties?.rme) : null;\r\n    }\r\n    if (new_mcoPropeties && (new_mcoPropeties?.rsme === null || new_mcoPropeties?.rsme === '' || new_mcoPropeties?.rsme === \"Unassigned\")) {\r\n        new_mcoPropeties['rsme'] = (msInformation?.mcoProperties?.rsme) ? (msInformation?.mcoProperties?.rsme) : null;\r\n    }\r\n\r\n    // for auto saving\r\n    // submitPropertiesForm(\"auto\");\r\n\r\n    return new_mcoPropeties;\r\n}\r\nconst prepareItemPayload = async (responseData) => {\r\n    try {\r\n        const getStorevalue = Store.getState();\r\n        const plantData = getStorevalue.mcoDetails.plants || [];\r\n        const sourceData = getStorevalue.mcoDetails.source || [];\r\n        const templateList = getStorevalue.mcoDetails.templates || [];\r\n        const getTargetInfo = prepareTargetInfo(responseData, plantData, sourceData);\r\n\r\n        const mcoService = new MCOService();\r\n        let itemData = await mcoService.getItemDetailsByMcoId(responseData?.mcoPropeties?.id);\r\n\r\n        const affectedPartsData = await getAffectedPartsData();\r\n        let affectedItems = itemData?.affectedItems.map(gitem => {\r\n            const filteredAffItem = affectedPartsData.filter(material => gitem?.id === material.id);\r\n\r\n            let filteredAffItemDetail = null;\r\n            if (filteredAffItem.length && filteredAffItem[0].materialType !== null) {\r\n                filteredAffItemDetail = {\r\n                    name: filteredAffItem[0].materialType.name,\r\n                    attributes: {\r\n                        ...filteredAffItem[0].materialType.attributeMap,\r\n                        'Sales Org': getTargetInfo?.plantInfo?.['SalesOrg'],\r\n                        // ...(responseData?.isMaster === \"N\" && { 'Copy From': undefined })\r\n                    }\r\n                };\r\n\r\n                // remove the field while copy the value from master\r\n                if (responseData?.isMaster === \"N\") {\r\n                    delete filteredAffItemDetail.attributes['Copy From'];\r\n                }\r\n            }\r\n            gitem.materialType = filteredAffItemDetail;\r\n\r\n            // dynamic attributes updates  \r\n            const thisTemp = templateList?.find(titem => titem?.templateName === gitem.materialType?.name) || {};\r\n\r\n            if (thisTemp.attributes) {\r\n                thisTemp.attributes.forEach(aitem => {\r\n                    const targetKey = aitem.name;\r\n                    const sourceValue = gitem[targetKey];\r\n                    const sourceData = gitem.attributeGroupData?.[targetKey];\r\n                    const findingMappingValues = Object.keys(aitem.values[0]).find(attritem => aitem.values[0][attritem] === sourceValue);\r\n                    const findingMappingValues2 = Object.keys(aitem.values[0]).find(attritem => aitem.values[0][attritem] === sourceData);\r\n\r\n                    if (sourceValue !== undefined) gitem[targetKey] = findingMappingValues;\r\n                    if (sourceData !== undefined) gitem.attributeGroupData[targetKey] = findingMappingValues2;\r\n                });\r\n            }\r\n\r\n            return gitem;\r\n        });\r\n\r\n        itemData.affectedItems = affectedItems;\r\n        itemData.target = getTargetInfo?.targetInfo;\r\n\r\n        return itemData;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\nconst formatDate = (thisDate) => {\r\n    const dateFormat = dayjs(thisDate).format('YYYYMMDD');\r\n    return dateFormat;\r\n}\r\nconst prepareBomPayload = (itemData, getTargetInfo) => {\r\n    let new_itemData = itemData;\r\n    const collectParentItems = [];\r\n    const new_parentItems = new_itemData?.parentItems.map((pItem) => {\r\n        collectParentItems.push(pItem.parentItemNumber);\r\n        if (getTargetInfo?.plantInfo?.ECN_required === \"N\") {\r\n            pItem.parentItemRevision = '';\r\n            if (pItem?.childItems?.length) {\r\n                const newchildItem = pItem?.childItems?.map((citem) => {\r\n                    citem['childRevision'] = '';\r\n                    citem['effectivityDate'] = formatDate(citem.effectivityDate);\r\n                    return citem;\r\n                })\r\n                pItem.childItems = newchildItem;\r\n            }\r\n        }\r\n        return pItem;\r\n    })\r\n    new_itemData.parentItems = new_parentItems;\r\n\r\n    new_itemData['target'] = getTargetInfo?.targetInfo;\r\n    return { bomPayloadData: new_itemData, collectParentItems: collectParentItems };\r\n}\r\nconst prepareTargetInfo = (responseData, plantData, sourceData) => {\r\n    const org_id = responseData?.mcoPropeties?.organizationId;\r\n    const sourceUrl = responseData?.source?.url;\r\n    const currplantName = responseData?.mcoPropeties?.plantName;\r\n    let targetInfo = [];\r\n    if (org_id) {\r\n        const orgarr = org_id.split(\" \");\r\n        if (orgarr.length) {\r\n            const findSourceInfo = sourceData?.filter((fitem) => {\r\n                return (orgarr[0] === \"ORACLE\") || (fitem.ERPType === orgarr[0] && fitem.instance === orgarr[1] && sourceUrl === fitem?.source);\r\n            }) || [];\r\n            targetInfo = findSourceInfo;\r\n        }\r\n    }\r\n\r\n    return generateTargetInfo(currplantName, plantData, targetInfo)\r\n}\r\n\r\nconst generateTargetInfo = (currplantName, plantData, targetInfo) => {\r\n    let findPlantInfo = null;\r\n    let findTargetInfo = null;\r\n    if (targetInfo.length) {\r\n        targetInfo = targetInfo[0];\r\n\r\n        findPlantInfo = plantData?.filter((fitem) => {\r\n            return fitem.ERPType === targetInfo?.ERPType && (fitem.instance === targetInfo?.environment || fitem.instance === targetInfo?.instance) && fitem.plantName === currplantName;\r\n        }) || null;\r\n\r\n        if (findPlantInfo) {\r\n            findPlantInfo = findPlantInfo[0];\r\n            let findPlantName = findPlantInfo?.aliasPlant;\r\n\r\n            findTargetInfo = {\r\n                system: targetInfo?.ERPType,\r\n                instance: targetInfo?.environment,\r\n                businessUnit: \"BU\",\r\n                plant: findPlantName,\r\n                url: findPlantInfo?.ConnectivityDetails?.url,\r\n                username: findPlantInfo?.ConnectivityDetails?.username,\r\n                password: findPlantInfo?.ConnectivityDetails?.password,\r\n                authkey: \"\",\r\n                port: \"\",\r\n                sapsysnum: findPlantInfo?.ConnectivityDetails?.sapsysnum,\r\n                sapclientid: findPlantInfo?.ConnectivityDetails?.sapclientid,\r\n                \"BOM Usage\": findPlantInfo?.bomusage ?? ''\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        targetInfo: findTargetInfo,\r\n        plantInfo: findPlantInfo\r\n    }\r\n}\r\n\r\nconst updateFinalAcksDetails = (payloadData, callfrom = '') => {\r\n    try {\r\n        const mcoService = new MCOService();\r\n        mcoService.updateFinalAcksDetails(payloadData).then((response) => {\r\n            if (response?.data) {\r\n                const currMcoDetails = response?.data;\r\n\r\n                if (callfrom === \"autorelease\") {\r\n                    return;\r\n                }\r\n                Store.dispatch(update_generalValues({\r\n                    currentMcoDetails: currMcoDetails\r\n                }));\r\n            }\r\n        }).catch((error) => {\r\n            return error;\r\n        });\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n}\r\n\r\nconst callLoggingInfo = async (payloadData, thisType) => {\r\n    try {\r\n        const new_payloadData = {\r\n            type: thisType,\r\n            payloadDetails: payloadData\r\n        };\r\n        const mcoService = new MCOService();\r\n        await mcoService.callLoggingInfo(new_payloadData);\r\n        return;\r\n    } catch (errors) {\r\n        throw errors\r\n    }\r\n}\r\n\r\nconst prepareFormData = (responseData) => {\r\n    const data = {};\r\n    const labelArr = {\r\n        rme: \"Responsible Manufacturing Engineer\",\r\n        rsme: \"Responsible Senior Manufacturing Engineer\",\r\n        mcostate: \"State\",\r\n        responseFromErp: \"Export Status\",\r\n        plantName: \"Plant\",\r\n        description: \"description\",\r\n        startdate: \"Start Date\",\r\n        ECOExportToERP: \"ECOExportToERP\",\r\n    };\r\n    const requiredFields = ['description', 'rme', 'rsme', 'startdate', 'ECOExportToERP'];\r\n    for (const item in responseData?.mcoPropeties) {\r\n        if (responseData?.mcoPropeties.hasOwnProperty(item)) {\r\n            if (requiredFields.includes(item)) {\r\n                if (item === 'startdate') {\r\n                    data['MBOM Start Date'] = responseData?.mcoPropeties[item];\r\n                    data['Start Date'] = responseData?.mcoPropeties[item];\r\n                } else {\r\n                    data[labelArr[item]] = (responseData?.mcoPropeties[item]) ? responseData?.mcoPropeties[item] : \"\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (data?.hasOwnProperty(\"ECOExportToERP\")) {\r\n        delete data?.ECOExportToERP;\r\n    }\r\n    return data;\r\n};\r\nconst prepareFormDataForMassUpdate = (responseData) => {\r\n    const data = {};\r\n    const labelArr = {\r\n        rme: \"Responsible Manufacturing Engineer\",\r\n        rsme: \"Responsible Senior Manufacturing Engineer\",\r\n        mcostate: \"State\",\r\n        responseFromErp: \"Export Status\",\r\n        plantName: \"Plant\",\r\n        description: \"description\",\r\n        startdate: \"Start Date\",\r\n    };\r\n    const requiredFields = ['description', 'rme', 'rsme', 'startdate'];\r\n    for (const item in responseData) {\r\n        if (responseData?.hasOwnProperty(item)) {\r\n            if (requiredFields.includes(item)) {\r\n                if (item === 'startdate') {\r\n                    data['MBOM Start Date'] = responseData?.[item];\r\n                    data['Start Date'] = responseData?.[item];\r\n                } else {\r\n                    data[labelArr[item]] = responseData?.[item];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return data;\r\n};\r\nfunction deepClone(obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return obj; // Return primitives as is\r\n    }\r\n\r\n    if (Array.isArray(obj)) {\r\n        return obj.map(deepClone); // Clone arrays recursively\r\n    }\r\n\r\n    // Clone objects recursively\r\n    return Object.fromEntries(\r\n        Object.entries(obj).map(([key, value]) => [key, deepClone(value)])\r\n    );\r\n}\r\n\r\nconst validateForm = (responseData, vType) => {\r\n    let errors = {};\r\n    const labelArr = {\r\n        startDate: \"Startdate\",\r\n        rme: \"Responsible Manufacturing Engineer\",\r\n        rsme: \"Responsible Senior Manufacturing Engineer\",\r\n        mcostate: \"State\",\r\n        responseFromErp: \"Export Status\",\r\n        plantName: \"Plant\",\r\n        description: \"Description\",\r\n        ECOExportToERP: \"ECO Export To ERP\"\r\n    };\r\n    if (Object.keys(responseData?.mcoPropeties || {}).length) {\r\n        const values = responseData?.mcoPropeties;\r\n        console.log(values,\"valuesvaluesvaluesvalues\");\r\n\r\n\r\n        // Validation logic for each field\r\n        // Assuming values.startdate is a Date object or a string in ISO 8601 format (e.g., '2024-04-19')\r\n        if (!values?.startdate) {\r\n            errors.startdate = `${values?.name}: ${labelArr['startDate']} is required`;\r\n        } else {\r\n            let currentDate = new Date();\r\n            currentDate.setHours(0, 0, 0, 0); // Set current date's time to midnight\r\n\r\n            let parts = values?.startdate.split(/[\\s/:]+/); // Split the string by space, /, and :\r\n            let startDate = new Date(parts[2], parts[0] - 1, parts[1], parts[3], parts[4], parts[5]); // Year, month (0-based), day, hour, minute, second\r\n            console.log(startDate,\"startDate\");\r\n            console.log(responseData?.mcoPropeties,\"responseData?.mcoPropeties\");\r\n\r\n            if (startDate < currentDate && responseData?.mcoPropeties.mcostate !== \"Release\" && responseData?.mcoPropeties.mcostate !== \"Create\" && responseData?.mcoPropeties.mcostate !== \"Review\") {                \r\n                errors.startdate = `${values?.name}: ${labelArr['startDate']} must be a present or future date`;\r\n            }\r\n\r\n            // if(value.mcostate == \"release\" ){\r\n            // }\r\n        }\r\n\r\n        if(instance !== 'SaaS'){\r\n            if (!values.rme || values.rme?.toLowerCase() === \"unassigned\") {\r\n                errors.rme = `${values?.name}: ${labelArr['rme']} is required`;\r\n            }\r\n            if (!values.rsme || values.rsme?.toLowerCase() === \"unassigned\") {\r\n                errors.rsme = `${values?.name}: ${labelArr['rsme']} is required`;\r\n            }\r\n            if (!values.description) {\r\n                errors.description = `${values?.name}: ${labelArr['description']} is required`;\r\n            }\r\n        }\r\n        \r\n        if (!values.ECOExportToERP && vType !== \"cavalidation\") {\r\n            errors.ECOExportToERP = `${values?.name}: ${labelArr['ECOExportToERP']} is required`;\r\n        }\r\n    }\r\n    return errors;\r\n};\r\n\r\n// new func\r\nconst validationChecks = async (vType, responseData, affectedPartsData = [], itemValidationArr) => {\r\n    const getStorevalue = Store.getState();\r\n    const templateMappingsInfo = getStorevalue.mcoDetails.templateMappingsInfo || [];\r\n\r\n    let organizationId = responseData?.mcoPropeties?.organizationId;\r\n\r\n    // Validation of Properties tab\r\n    const errorsOfPropertiesForm = validateForm(responseData, vType);\r\n    if (Object.keys(errorsOfPropertiesForm).length) {\r\n        return { valid: false, errDesc: errorsOfPropertiesForm };\r\n    }\r\n\r\n    // Validation of parts tab\r\n    const colErrorsArr = [];\r\n    const mcoData = responseData.mcoPropeties;\r\n    const MCOPlantName = mcoData?.plantName;\r\n    // const organizationId = mcoData?.organizationId;\r\n    affectedPartsData?.forEach((gitem, gkey) => {\r\n\r\n        // for twin plant - rdo checks to allow user to save with selecting template\r\n        // const partBU = gitem?.organization;\r\n        // const plantPair = getRDOOUOrgSetMappings(templateMappingsInfo, partBU, MCOPlantName);\r\n\r\n        // This check will apply to ORACLE AND SAP\r\n        // if (!gitem?.materialType?.name && !plantPair?.includes(MCOPlantName)) {\r\n        //     colErrorsArr.push(`${mcoData?.name}: ${gitem?.name} part material type is not valid!`)\r\n        // }\r\n        \r\n        if ((vType === \"lifecycle\" || vType == 'cavalidation') && !gitem?.materialType?.name) {\r\n            let msgtemplate;\r\n            if (organizationId.includes('SAP')) {\r\n                msgtemplate = errorMessages?.messages?.SAP?.templateUnassigned;\r\n            } else if (organizationId.includes('ORACLE')) {\r\n                msgtemplate = errorMessages?.messages?.ORACLE?.templateUnassigned;\r\n            }\r\n            if (msgtemplate) {\r\n                const msgReplacementArr = [mcoData?.name, gitem?.name];\r\n                const formattedMessage = formatMessage(msgtemplate, msgReplacementArr);\r\n                colErrorsArr.push(formattedMessage);\r\n            }\r\n        }\r\n\r\n        // if (organizationId.includes('SAP')) {\r\n        //     // attributes checks\r\n        //     if (!Object.keys(gitem?.materialType)?.includes(\"attributeMap\")) {\r\n        //         colErrorsArr.push(`${mcoData?.name}: ${gitem?.name} part attribute key was missing! please verify it.`)\r\n        //     } else if (gitem?.materialType?.attributeMap === undefined || !Object.keys(gitem?.materialType?.attributeMap).length) {\r\n        //         colErrorsArr.push(`${mcoData?.name}: ${gitem?.name} part attribute values are not valid!`)\r\n        //     }\r\n\r\n        //     // ProductHierarchy checks\r\n        //     if (!Object.keys(gitem)?.includes(\"attributeGroupData\")) {\r\n        //         colErrorsArr.push(`${mcoData?.name}: ${gitem?.name} part attribute group data key was missing! please verify it.`)\r\n        //     } else if (!Object.keys(gitem?.attributeGroupData)?.includes(\"ProductHierarchy\")) {\r\n        //         colErrorsArr.push(`${mcoData?.name}: ${gitem?.name} part product hierarchy key was missing! please verify it.`)\r\n        //     } else if (!gitem?.attributeGroupData?.ProductHierarchy || gitem?.attributeGroupData?.ProductHierarchy === '') {\r\n        //         colErrorsArr.push(`${mcoData?.name}: ${gitem?.name} part product heirarchy value is not valid!`)\r\n        //     }\r\n        // }\r\n    });\r\n\r\n    return { valid: !colErrorsArr?.length, errDesc: colErrorsArr };\r\n}\r\n\r\nconst validationChecks_old = async (vType, responseData, itemValidationArr) => {\r\n    const getStorevalue = Store.getState();\r\n    const templateMappingsInfo = getStorevalue.mcoDetails.templateMappingsInfo || [];\r\n\r\n    let validFieldArr = itemValidationArr;\r\n    let errorCount = {\r\n        isMaTypeHaveErr: true,\r\n        isAttrHaveErr: true,\r\n        isprodHeirarchyHaveErr: true,\r\n    };\r\n    let organizationId = responseData?.mcoPropeties?.organizationId;\r\n\r\n    // Validation of PropertiesForm\r\n    const errorsOfPropertiesForm = validateForm(responseData, vType);\r\n    if (Object.keys(errorsOfPropertiesForm).length) {\r\n        return { valid: false, errDesc: errorsOfPropertiesForm };\r\n    }\r\n\r\n    const mcoData = responseData.mcoPropeties;\r\n    const MCOPlantName = mcoData?.plantName;\r\n\r\n    responseData?.mcoaffectedItem?.forEach((gitem, gkey) => {\r\n        const findMatvalidInd = validFieldArr.findIndex((valItem, valInd) => {\r\n            return (gitem?.id === valItem.id);\r\n        });\r\n\r\n        let checkMatValid = true;\r\n\r\n        // for twin plant - rdo checks to allow user to save with selecting template\r\n        const partBU = gitem?.organization;\r\n        const plantPair = getRDOOUOrgSetMappings(templateMappingsInfo, partBU, MCOPlantName);\r\n        if (plantPair?.includes(MCOPlantName)) {\r\n            checkMatValid = false;\r\n            errorCount['isMaTypeHaveErr'] = false;\r\n        } else if (gitem?.materialType?.name) {\r\n            checkMatValid = false;\r\n            errorCount['isMaTypeHaveErr'] = false;\r\n        }\r\n\r\n        let checkAttValid = true;\r\n        if (organizationId.includes('SAP')) {\r\n            if (gitem?.materialType?.attributeMap !== undefined && Object.keys(gitem?.materialType?.attributeMap).length) {\r\n                checkAttValid = false;\r\n                errorCount['isAttrHaveErr'] = false;\r\n            }\r\n\r\n            let checkProducthierachyValid = true;\r\n            if (gitem?.attributeGroupData?.ProductHierarchy && gitem?.attributeGroupData?.ProductHierarchy !== '') {\r\n                checkProducthierachyValid = false;\r\n                errorCount['isprodHeirarchyHaveErr'] = false;\r\n            }\r\n\r\n            validFieldArr[findMatvalidInd].materialTypeError = checkMatValid;\r\n            validFieldArr[findMatvalidInd].attributeFormError = checkAttValid;\r\n            validFieldArr[findMatvalidInd].producthierachyError = checkProducthierachyValid;\r\n\r\n        } else if (organizationId.includes('ORACLE')) {\r\n            validFieldArr[findMatvalidInd].materialTypeError = checkMatValid;\r\n            validFieldArr[findMatvalidInd].attributeFormError = false; // disable for oracle\r\n            validFieldArr[findMatvalidInd].producthierachyError = false; // disable for oracle\r\n        }\r\n    });\r\n\r\n    return callDisplayErrorNotification(errorCount, validFieldArr, organizationId);\r\n}\r\n\r\nconst callDisplayErrorNotification = (errorCount, itemValidationArr, organizationId) => {\r\n    try {\r\n        let valid = true;\r\n        let errDesc = \"\";\r\n        if (itemValidationArr?.length) {\r\n            itemValidationArr?.map((item) => {\r\n                if (valid && (item?.materialTypeError || item?.attributeFormError || item?.producthierachyError)) {\r\n                    valid = false\r\n                }\r\n                return { valid: true, errDesc: '' };\r\n            })\r\n        }\r\n\r\n        if (!valid) {\r\n            errDesc = 'Please fill mandatory details.';\r\n            if (errorCount?.isMaTypeHaveErr && errorCount?.isAttrHaveErr && organizationId.includes('SAP')) {\r\n                errDesc = \"Invalid Material type and attributes.\";\r\n            } else if (errorCount?.isMaTypeHaveErr) {\r\n                errDesc = \"Invalid Material type.\";\r\n            } else if (errorCount?.isAttrHaveErr && organizationId.includes('SAP')) {\r\n                errDesc = \"Please fill mandatory attributes.\";\r\n            } else if (errorCount?.isprodHeirarchyHaveErr && organizationId.includes('SAP')) {\r\n                errDesc = \"Product Hierarchy information missing.\";\r\n            }\r\n        }\r\n\r\n        return { valid: valid, errDesc: errDesc };\r\n    } catch (err) {\r\n        return { valid: false, errDesc: err?.message };\r\n    }\r\n}\r\n\r\nconst collectSourcePlantTemplate = async (resData, getMasterDatails = []) => {\r\n    // if(instance === \"SaaS\")\r\n    // resData.mcoPropeties = resData?.mcoProperties;\r\n    // console.log('resData', resData);\r\n    try {\r\n        const sptPayload = {\r\n            \"plantName\": resData?.mcoPropeties?.plantName,\r\n            \"organizationId\": resData?.mcoPropeties?.organizationId,\r\n            \"sourceUrl\": resData?.source?.url,\r\n            \"mcotype\": (getMasterDatails[0]?.id === resData?.mcoPropeties?.id) ? \"master\" : \"child\",\r\n            \"businessUnit\": resData?.mcoPropeties?.businessUnit,\r\n        }\r\n        console.log('source payload', sptPayload);\r\n        let materialDataArr = [];\r\n        const mcoService = new MCOService();\r\n        await mcoService.getSourcePlantTemplate(sptPayload).then(async (respdata) => {\r\n            if (respdata) {\r\n                console.log('respdata', respdata);\r\n                console.log('resData?.mcoPropeties?.plantName', resData?.mcoProperties?.plantName);\r\n                respdata.plants.map((plant)=>{\r\n                    if(resData?.mcoPropeties?.plantName){\r\n                        resData.mcoPropeties.organizationId = plant.ERPType + ' ' + plant.instance;\r\n                    }\r\n                })\r\n                console.log('resData?.mcoPropeties?.organizationId', resData);\r\n                materialDataArr = respdata.templates;\r\n\r\n                let merge_templates = respdata.templates || [];\r\n                console.log('getMasterDatails', getMasterDatails);\r\n                if ((getMasterDatails[0]?.id && getMasterDatails[0]?.id) && getMasterDatails[0]?.id !== resData?.mcoPropeties?.id) {\r\n                    const mastersptPayload = {\r\n                        \"plantName\": resData?.mcoaffectedItem[0]?.relatedMCOs[0]?.plantName,\r\n                        \"organizationId\": resData?.mcoPropeties?.organizationId,\r\n                        \"sourceUrl\": resData?.source?.url,\r\n                        \"mcotype\": (getMasterDatails[0]?.id === resData?.mcoaffectedItem[0]?.relatedMCOs[0]?.id) ? \"master\" : \"child\",\r\n                        \"businessUnit\": resData?.mcoPropeties?.businessUnit,\r\n                    }\r\n                    console.log('mastersptPayload', mastersptPayload);\r\n                    await mcoService.getSourcePlantTemplate(mastersptPayload).then((respdata2) => {\r\n                        if (respdata2) {\r\n                            merge_templates = respdata2.templates.concat(respdata.templates);\r\n                        }\r\n                    })\r\n                }\r\n\r\n                const ORGAllowedTemplateMappings = respdata?.templateMappingsInfo?.filter((tmitem) => {\r\n                    return tmitem?.MappingType === \"orgallowedvalues\";\r\n                });\r\n\r\n                const final_spt = {\r\n                    source: (respdata?.source),\r\n                    businessUnitList: { [resData?.mcoPropeties?.name]: respdata?.businessUnit },\r\n                    plants: (respdata?.plants),\r\n                    templates: (merge_templates),\r\n                    materialData: (materialDataArr),\r\n                    templateMappingsInfo: (respdata?.templateMappingsInfo),\r\n                    ORGAllowedTemplateMappings: (ORGAllowedTemplateMappings),\r\n                }\r\n                Store.dispatch(update_generalValues(final_spt));\r\n            }\r\n        })\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n}\r\nconst collectAndStoreMRDetails = async (locresData) => {\r\n    console.log('locresData', locresData);\r\n    try {\r\n        let instanceVal = localStorage.getItem('instance');\r\n        let getMrPayload = [];\r\n        if (locresData?.mcoPropeties?.organizationId?.includes('ORACLE')) {\r\n            getMrPayload = locresData?.mcoaffectedItem?.map((gitem, gkey) => {\r\n                return {\r\n                    partName: gitem?.name,\r\n                    plantName: locresData?.mcoPropeties?.plantName,\r\n                    businessUnit: gitem?.organization,\r\n                    mcoId: locresData?.mcoPropeties?.id,\r\n                    mcoName: locresData?.mcoPropeties?.name,\r\n                    revision: gitem?.revision,\r\n                    partId: gitem?.id,\r\n                    targetPlant: \"MVO\",\r\n                    instance: instanceVal || \"onPrem\",\r\n                }\r\n            });\r\n        } else if (locresData?.mcoPropeties?.organizationId?.includes('SAP')) {\r\n            const orgId = locresData?.mcoPropeties?.organizationId;\r\n            const masterMapping = generalInfo?.sapPlantConfiguration; // coming from generalinfo configuration file\r\n            const masterPlantName = masterMapping?.[orgId] || \"MMP01\";            \r\n            getMrPayload = locresData?.mcoaffectedItem.map((gitem, gkey) => {\r\n                return {\r\n                    partName: gitem?.name,\r\n                    plantName: locresData?.mcoPropeties?.plantName,\r\n                    businessUnit: gitem?.organization,\r\n                    mcoId: locresData?.mcoPropeties?.id,\r\n                    mcoName: locresData?.mcoPropeties?.name,\r\n                    revision: gitem?.revision,\r\n                    partId: gitem?.id,\r\n                    targetPlant: masterPlantName,\r\n                    instance: instanceVal || \"onPrem\",\r\n                }\r\n            });\r\n        }\r\n        const mcoService = new MCOService();\r\n        console.log('getMrPayload', getMrPayload);\r\n        const mrData = await mcoService.getMRbyPartAndPlant(getMrPayload);\r\n        await Store.dispatch(update_generalValues({\r\n            mrDetails: mrData,\r\n        }));\r\n    } catch (err) {\r\n        throw err;\r\n    }\r\n}\r\nconst collectAllPartBUDetails = async (locresData) => {\r\n    try {\r\n        const mrPayload = locresData?.mcoaffectedItem.map((gitem) => {\r\n            return {\r\n                id: gitem?.organization,\r\n            }\r\n        });\r\n        const mcoService = new MCOService();\r\n        await mcoService.getBusinessUnitbyid(mrPayload).then(async (resp) => {\r\n            await Store.dispatch(update_generalValues({\r\n                allPartsBusinessUnitDetails: resp?.data,\r\n            }));\r\n        });\r\n    } catch (error) {\r\n        throw error;\r\n    }\r\n}\r\nconst collectSystemSettingsDetails = async (resData) => {\r\n    try {\r\n        let inst = localStorage.getItem('instance');\r\n        let organizationId = resData?.mcoPropeties?.organizationId;\r\n        if (!organizationId || typeof organizationId !== \"string\") {\r\n            console.error(\"Invalid organizationId:\", organizationId);\r\n            return false; // Prevent further execution\r\n        }\r\n\r\n        const parts = organizationId.split(\" \");\r\n        const ERPType = parts.length ? parts[0] : null;\r\n        if (!ERPType) {\r\n            return false;\r\n        }\r\n\r\n        const payload = [`${ERPType}_${inst || \"onPrem\"}`];\r\n        const systemSettingsService = new SystemSettingsService();\r\n        await systemSettingsService.getSystemSettingsbyid(payload).then((resp) => {\r\n            if (resp?.status === \"success\") {\r\n                Store.dispatch(update_generalValues({\r\n                    systemSetingsDetail: resp?.data,\r\n                }));\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(\"An error occurred:\", error);\r\n        throw error;\r\n    }\r\n}\r\nconst collectParentMCODetails = async (resData) => {\r\n    try {\r\n        let currentMCOName = resData?.mcoPropeties?.name;\r\n        let currentMCOPlantdetails = resData?.mcoPropeties?.plantName;\r\n        let parentMCOName = currentMCOName?.replace(currentMCOPlantdetails, \"MVO\");\r\n\r\n        if (parentMCOName?.includes(\"MVO\") && !currentMCOName?.includes(\"MVO\")) {\r\n            const payload = [parentMCOName];\r\n            const mcoService = new MCOService();\r\n            await mcoService.getMcoDetailsByName(payload).then((resp) => {\r\n                if (resp?.[parentMCOName]?.mcoProperties?.name === parentMCOName) {\r\n                    Store.dispatch(update_generalValues({\r\n                        parentMCODetails: resp?.[parentMCOName],\r\n                    }));\r\n                }\r\n            });\r\n        }\r\n    } catch (error) {\r\n        console.error(\"An error occurred:\", error);\r\n        throw error;\r\n    }\r\n}\r\nconst initialMRFunctions = async (resData) => {\r\n    try {\r\n        await collectAndStoreMRDetails(resData);\r\n        await collectAllPartBUDetails(resData);\r\n        await collectSystemSettingsDetails(resData);\r\n        await collectParentMCODetails(resData);\r\n    } catch (error) {\r\n        console.error(\"An error occurred:\", error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nconst specificationfileterfunction = async (mco_id) => {\r\n    try {\r\n        const mcoService = new MCOService();\r\n        await mcoService.getSpecDetailsByMcoId(mco_id).then(async (resAffData) => {\r\n            if (Object.keys(resAffData).length) {\r\n                await Store.dispatch(update_generalValues({\r\n                    specDetails: resAffData\r\n                }));\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(\"An error occurred:\", error);\r\n        throw error;\r\n    }\r\n}\r\nconst updateMcoDetailsInDatabase = async (updatedPropetiesValue, responseData, saveMode = \"\") => {\r\n    try {\r\n        const getpayloadData = [{ id: responseData?.mcoPropeties?.id, instance: instance}];\r\n        const mcoService = new MCOService();\r\n        const resData = await mcoService.getattributesbyid(getpayloadData);\r\n\r\n        let payloadData = {};\r\n        if ((Object.keys(resData?.data).length && resData?.data[0]) && saveMode === \"saveMcoState\") {\r\n            payloadData = {\r\n                id: responseData?.mcoPropeties?.id,\r\n                producthub: `${responseData?.mcoPropeties?.name}_${responseData?.mcoPropeties?.plantName}`,\r\n                uniquePartId: `${responseData?.mcoPropeties?.name}_${responseData?.mcoPropeties?.plantName}`,\r\n                mcoProperties: updatedPropetiesValue,\r\n            };\r\n        } else {\r\n            payloadData = {\r\n                id: responseData?.mcoPropeties?.id,\r\n                producthub: `${responseData?.mcoPropeties?.name}_${responseData?.mcoPropeties?.plantName}`,\r\n                uniquePartId: `${responseData?.mcoPropeties?.name}_${responseData?.mcoPropeties?.plantName}`,\r\n                mcoProperties: updatedPropetiesValue,\r\n                mcoaffectedItem: responseData?.mcoaffectedItem,\r\n                source: responseData?.source,\r\n                target: responseData?.target\r\n            };\r\n        }\r\n        const updateOrAddAttribute = async (payloadData) => {\r\n            try {\r\n                const updateFunction = (Object.keys(resData?.data).length && resData?.data[0]) ? mcoService.updateattributesbyid : mcoService.addattributes;\r\n                const getUpdateResponse = await updateFunction(payloadData);\r\n                if (saveMode === \"saveMcoState\" && Object.keys(getUpdateResponse?.data || {}).length) {\r\n                    const updateResData = getUpdateResponse?.data || {};\r\n                    await Store.dispatch(updateMcoDetails({\r\n                        mcoPropeties: updateResData?.mcoProperties,\r\n                        mcoaffectedItem: updateResData?.mcoaffectedItem,\r\n                    }));\r\n                    await prepareAffectedPartData();\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n                return { status: \"failed\", data: err?.message };\r\n            }\r\n        };\r\n        await updateOrAddAttribute(payloadData);\r\n    } catch (error) {\r\n        console.log(error);\r\n        return { status: \"failed\", data: error?.message };\r\n    }\r\n};\r\nconst getAffectedPartsData = async () => {\r\n    const getStorevalue = Store.getState();\r\n    const responseData = getStorevalue?.mcoDetails?.responseData || {};\r\n    const affectedPartsData = getStorevalue?.mcoDetails?.affectedPartsData || [];\r\n    if (affectedPartsData?.length) {\r\n        return affectedPartsData || [];\r\n    } else {\r\n        return responseData?.mcoaffectedItem || [];\r\n    }\r\n}\r\nconst handleMaterialTypeSelect = async (selectedValue, thisRowId = 0, dropType) => {\r\n    const getStorevalue = Store.getState();\r\n    const templateMappingsInfo = getStorevalue.mcoDetails.templateMappingsInfo || [];\r\n    const responseData = getStorevalue.mcoDetails.responseData || {};\r\n    const materialData = getStorevalue.mcoDetails.materialData || [];\r\n\r\n    // let mcoaffectedItem = [...responseData.mcoaffectedItem];\r\n    const affectedPartsData = await getAffectedPartsData();\r\n    let mcoaffectedItem = [...affectedPartsData];\r\n\r\n    let thisRowIndex = mcoaffectedItem?.findIndex(foption => {\r\n        return foption.id === thisRowId;\r\n    });\r\n\r\n    // console.log(`Selected value: ${selectedValue} and thisRowIndex: ${thisRowIndex}`);\r\n\r\n    if (dropType === \"template\") {\r\n        let findMaterialName = (materialData?.filter(foption => {\r\n            return foption.id === selectedValue;\r\n        }) || []);\r\n        findMaterialName = (findMaterialName?.length) ? findMaterialName[0] : null;\r\n        mcoaffectedItem[thisRowIndex]['materialType'] = (findMaterialName) ? { name: findMaterialName?.templateName } : null;\r\n        mcoaffectedItem[thisRowIndex]['isTemplateValueChange'] = true;\r\n\r\n        // Find makeORBuy value and assign it\r\n        let partBusinessUnitValue = mcoaffectedItem[thisRowIndex]?.organization;\r\n        let buplantmapping_RDOPlants = templateMappingsInfo?.find((acitem) => {\r\n            return acitem.MappingType === 'buplantmapping' && acitem.BUID?.toLowerCase() === partBusinessUnitValue?.toLowerCase() && acitem?.details?.Entity.toLowerCase() === \"bom or no bom\";\r\n        }) || {}\r\n        let hasMbomTemplateList = templateMappingsInfo?.filter((acitem) => {\r\n            return acitem.MappingType === 'orgallowedvalues' && acitem.BUID?.toLowerCase() === partBusinessUnitValue?.toLowerCase() && acitem?.details?.Has_MBOM?.toLowerCase() === \"y\";\r\n        }).map((eitem) => {\r\n            return eitem?.details?.ALLOWABLE_ORG_TEMPLATES;\r\n        }) || [];\r\n\r\n        let isExceptionalPlant = false;\r\n        let hasMbomTemplate = false;\r\n        if (Object.keys(hasMbomTemplateList).length) {\r\n            if (hasMbomTemplateList?.includes(findMaterialName?.templateName)) {\r\n                hasMbomTemplate = true;\r\n            }\r\n        }\r\n        if (Object.keys(buplantmapping_RDOPlants).length) {\r\n            const plantValue = buplantmapping_RDOPlants?.details?.PLANT;\r\n            const getPlantList = Object.keys(plantValue).filter((ekeys) => {\r\n                return plantValue[ekeys]?.toLowerCase() === \"no bom\"\r\n            });\r\n            if (getPlantList?.includes(responseData?.mcoPropeties?.plantName)) {\r\n                isExceptionalPlant = true;\r\n            }\r\n        };\r\n        if (hasMbomTemplate && !isExceptionalPlant) {\r\n            mcoaffectedItem[thisRowIndex]['makeOrBuy'] = \"make\";\r\n            mcoaffectedItem[thisRowIndex]['isMakeOrBuyValueChange'] = true;\r\n        } else {\r\n            mcoaffectedItem[thisRowIndex]['makeOrBuy'] = \"buy\";\r\n            mcoaffectedItem[thisRowIndex]['isMakeOrBuyValueChange'] = true;\r\n        }\r\n    }\r\n\r\n    if (dropType === \"exportToERP\") {\r\n        mcoaffectedItem[thisRowIndex]['exportToERP'] = selectedValue;\r\n        mcoaffectedItem[thisRowIndex]['isExportToERPValueChange'] = true;\r\n    }\r\n\r\n    if (dropType === \"itemStatus\") {\r\n        mcoaffectedItem[thisRowIndex]['itemStatus'] = selectedValue;\r\n        mcoaffectedItem[thisRowIndex]['isItemStatusValueChange'] = true;\r\n    }\r\n\r\n    if (dropType === \"updateRowData\") {\r\n        mcoaffectedItem[thisRowIndex]['newRevision'] = selectedValue?.newRevision;\r\n        mcoaffectedItem[thisRowIndex]['oldRevision'] = selectedValue?.oldRevision;\r\n        mcoaffectedItem[thisRowIndex]['currentSequence'] = selectedValue?.currentSequence;\r\n\r\n        await Store.dispatch(update_generalValues({\r\n            affectedPartsData: mcoaffectedItem,\r\n        }));\r\n    } else {\r\n        await Store.dispatch(update_generalValues({\r\n            affectedPartsData: mcoaffectedItem,\r\n            isMaterialFormEdited: true\r\n        }));\r\n    }\r\n\r\n\r\n    return mcoaffectedItem;\r\n}\r\nconst findLabelForTooltip = (findMaterialDetails) => {\r\n    const getStorevalue = Store.getState();\r\n    const materialData = getStorevalue.mcoDetails.materialData || [];\r\n    if (!findMaterialDetails.id) {\r\n        return;\r\n    }\r\n    const selectedOption = materialData?.find(\r\n        (option) => option.id === findMaterialDetails.id\r\n    );\r\n    return (selectedOption?.templateName) ? selectedOption.templateName : '';\r\n}\r\nconst findDropdownValue = (affval) => {\r\n    const getStorevalue = Store.getState();\r\n    const masterData = getStorevalue.mcoDetails.masterData || {};\r\n    const materialData = getStorevalue.mcoDetails.materialData || [];\r\n    let findMaterialDetails = {};\r\n    if (masterData && Object.keys(masterData).length && masterData?.master === \"N\" && masterData?.mcoaffectedItem) {\r\n        let affkey = masterData?.mcoaffectedItem?.findIndex(foption => {\r\n            return foption.id === affval?.id;\r\n        });\r\n\r\n        findMaterialDetails = materialData?.filter((foption) => {\r\n            return foption.templateName === masterData?.mcoaffectedItem[affkey]?.materialType?.name;\r\n        }) || [];\r\n\r\n        findMaterialDetails = (findMaterialDetails?.length) ? findMaterialDetails[0] : {};\r\n\r\n    } else if (materialData?.length) {\r\n        findMaterialDetails = materialData?.filter((foption) => {\r\n            return ((affval?.materialType && foption.templateName === affval?.materialType?.name) || (foption.desc === affval?.attributeGroupData?.ERPItemTypeTemplate));\r\n        })\r\n\r\n        findMaterialDetails = (findMaterialDetails?.length) ? findMaterialDetails[0] : {};\r\n    }\r\n\r\n    return findMaterialDetails;\r\n}\r\nconst prepareAffectedPartData = async () => {\r\n    const getStorevalue = Store.getState();\r\n    const responseData = getStorevalue.mcoDetails.responseData || {};\r\n    const materialData = getStorevalue.mcoDetails.materialData || [];\r\n    const mrDetails = getStorevalue.mcoDetails.mrDetails || [];\r\n    const eachTemplateOptions = getStorevalue.mcoDetails.eachTemplateOptions || {};\r\n    let dropdownOpts = {};\r\n    if (responseData?.mcoaffectedItem?.length) {\r\n        // For accessing external file data\r\n        if (window?.ExternalClass) {\r\n            let data = {\r\n                affectedItemsInfo: responseData,\r\n            };\r\n            // Create an instance of the ExternalClass class\r\n            const externalClass = new window.ExternalClass(data);\r\n            // Call the getDropdownOptions method with a name\r\n            dropdownOpts = await externalClass.getDropdownOptions();\r\n        }\r\n        responseData?.mcoaffectedItem?.forEach((affval, affkey) => {\r\n            let findMaterialDetails = findDropdownValue(affval, affkey);\r\n            let thisDropOptions = eachTemplateOptions?.[affval?.name] || [];\r\n\r\n            if (Object.keys(dropdownOpts)?.length && Object.keys(dropdownOpts)?.includes(affval?.name)) {\r\n                thisDropOptions = dropdownOpts[affval?.name];\r\n            }\r\n            const templExistOrNot = thisDropOptions?.find(mtemp => {\r\n                return mtemp?.id === findMaterialDetails.id;\r\n            }) || {};\r\n            if (!Object.keys(templExistOrNot)?.length && Object.keys(findMaterialDetails)?.length) {\r\n                let prevSelectedTemplateObj = materialData?.find((foption) => {\r\n                    return findMaterialDetails?.Name === foption.templateName;\r\n                });\r\n                if (prevSelectedTemplateObj) {\r\n                    thisDropOptions = [...thisDropOptions, prevSelectedTemplateObj]\r\n                }\r\n            }\r\n\r\n            const activeMRData = (Object.keys(mrDetails)?.length && mrDetails?.activeMR?.hasOwnProperty(affval?.name) && mrDetails?.activeMR[affval?.name]?.length) ? mrDetails?.activeMR[affval?.name][0] : {};\r\n            const newRevision = Object.keys(activeMRData)?.length ? `${affval?.revision}${activeMRData?.additionalSequence}` : \"\";\r\n            const currentSequence = Object.keys(activeMRData)?.length ? `${activeMRData?.sequence}` : \"\";\r\n\r\n            const previousSeqMRData = (Object.keys(mrDetails)?.length && mrDetails?.activeMR?.hasOwnProperty(affval?.name) && mrDetails?.previousSeqMR[affval?.name]?.length) ? mrDetails?.previousSeqMR[affval?.name][0] : {};\r\n            const oldRevision = Object.keys(previousSeqMRData)?.length ? `${previousSeqMRData?.revision}${previousSeqMRData?.additionalSequence}` : \"\";\r\n\r\n            // update row data with new revisions\r\n            handleMaterialTypeSelect({\r\n                newRevision: newRevision,\r\n                oldRevision: oldRevision,\r\n                currentSequence: currentSequence,\r\n            }, affval?.id, 'updateRowData');\r\n\r\n            // getting active mr template for existing data from enovia\r\n            const activeMRtemplExistOrNot = thisDropOptions?.find(mtemp => {\r\n                return mtemp?.id === findMaterialDetails?.id;\r\n            }) || {};\r\n            if (!Object.keys(activeMRtemplExistOrNot)?.length) {\r\n                let activeTemplateObj = materialData?.find((foption) => {\r\n                    return activeMRData?.template === foption.templateName;\r\n                });\r\n                if (activeTemplateObj && !affval?.isTemplateValueChange) {\r\n                    thisDropOptions = [...thisDropOptions, activeTemplateObj]\r\n                    findMaterialDetails = activeTemplateObj;\r\n                    handleMaterialTypeSelect(findMaterialDetails?.templates, affval?.id, 'template');\r\n                }\r\n            }\r\n            let defaultOptValue = {};\r\n            if (Object.keys(previousSeqMRData || {})?.length) {\r\n                let previousSeqMRTemplateObj = materialData?.find((foption, findex) => {\r\n                    return foption?.templateName === previousSeqMRData?.template;\r\n                }) || {};\r\n                if (Object.keys(previousSeqMRTemplateObj)?.length) {\r\n                    thisDropOptions.push(previousSeqMRTemplateObj); // push the option to dropdown \r\n                    if (!affval?.isTemplateValueChange) {\r\n                        defaultOptValue = previousSeqMRTemplateObj; // for selecting the option\r\n                    }\r\n                }\r\n            }\r\n            if (!Object.keys(findMaterialDetails || {})?.length && !affval?.isTemplateValueChange) {\r\n                const isRevisionTempExist = thisDropOptions?.find((fcheckItem) => {\r\n                    return fcheckItem?.templateName === previousSeqMRData?.template;\r\n                }) || {};\r\n                if (!Object.keys(isRevisionTempExist)?.length && Object.keys(defaultOptValue)?.length) {\r\n                    findMaterialDetails = defaultOptValue;\r\n                    handleMaterialTypeSelect(findMaterialDetails?.templates, affval?.id, 'template');\r\n                } else if (Object.keys(isRevisionTempExist)?.length) {\r\n                    findMaterialDetails = isRevisionTempExist;\r\n                    handleMaterialTypeSelect(findMaterialDetails?.templates, affval?.id, 'template');\r\n                }\r\n            }\r\n            let getExportToERPValue = affval?.exportToERP;\r\n            let getItemStatusValue = (affval?.itemStatus)?.toLowerCase();\r\n            if (!getExportToERPValue && !affval?.isExportToERPValueChange) {\r\n                handleMaterialTypeSelect(getExportToERPValue, affval?.id, 'exportToERP')\r\n            }\r\n            if (!getItemStatusValue && !affval?.isItemStatusValueChange) {\r\n                getItemStatusValue = activeMRData?.ERPStatus?.toLowerCase();\r\n                handleMaterialTypeSelect(getItemStatusValue, affval?.id, 'itemStatus')\r\n            }\r\n        });\r\n    }\r\n    return;\r\n}\r\nconst exportMCOData = async (propertiesData, exportAffectedPartsData) => {\r\n    const getStorevalue = Store.getState();\r\n    const responseData = getStorevalue.mcoDetails.responseData || {};\r\n    const currentMcoDetails = getStorevalue.mcoDetails.currentMcoDetails || {};\r\n    // const exportAffectedPartsData = getStorevalue.mcoDetails.exportAffectedPartsData || [];\r\n\r\n    \r\n    const mcoService = new MCOService();\r\n    const affectedPartsData = await getAffectedPartsData();\r\n    let mcoaffectedItemVal = affectedPartsData;\r\n    if (exportAffectedPartsData?.length) {\r\n        mcoaffectedItemVal = exportAffectedPartsData;\r\n    } else {\r\n        mcoaffectedItemVal = sortAffData({ key: 'name', direction: 'asc' });\r\n    }\r\n\r\n    const new_mcoaffectedItemVal = mcoaffectedItemVal?.map((eitem) => {\r\n        let ErpStatus = responseData?.itemERPStatus && responseData?.itemERPStatus.filter((efitem) => {\r\n            return efitem?.Item_Name === eitem?.name;\r\n        });\r\n        ErpStatus = (ErpStatus?.length) ? ErpStatus[0]?.status : 'Not yet processed!';\r\n        eitem[\"ErpStatus\"] = ErpStatus;\r\n        return eitem;\r\n    }) || [];\r\n\r\n    const resData = await mcoService.exportMCOData({\r\n        mcoProperties: propertiesData,\r\n        mcoaffectedItem: new_mcoaffectedItemVal,\r\n        ERPstatus: currentMcoDetails?.ERPstatus,\r\n        ERPErrorDescription: currentMcoDetails?.ERPErrorDescription\r\n    });\r\n    console.log(resData);\r\n    return resData;\r\n}\r\nconst sortAffData = (sortConfig) => {\r\n    const getStorevalue = Store.getState();\r\n    const responseData = getStorevalue.mcoDetails.responseData || {};\r\n    const affectedPartsData = getStorevalue.mcoDetails.affectedPartsData || [];\r\n\r\n    let data = responseData?.mcoaffectedItem || [];\r\n    if (affectedPartsData?.length) {\r\n        data = affectedPartsData;\r\n    }\r\n\r\n    if (!sortConfig.key) return data;\r\n\r\n    console.log(sortConfig, \"=====sortConfig\");\r\n\r\n    let sortedData = [];\r\n    if (sortConfig.key === \"materialTypeTemplate\") {\r\n        sortedData = [...data].map(item => {\r\n            item.materialType = (item?.materialType) ? item?.materialType : { name: \"Unassigned\" };\r\n            return item;\r\n        }).sort((a, b) => {\r\n            if (a[\"materialType\"]?.[\"name\"] < b[\"materialType\"]?.[\"name\"]) return sortConfig.direction === 'asc' ? -1 : 1;\r\n            if (a[\"materialType\"]?.[\"name\"] > b[\"materialType\"]?.[\"name\"]) return sortConfig.direction === 'asc' ? 1 : -1;\r\n            return 0;\r\n        }) || [];\r\n    } else {\r\n        sortedData = [...data].sort((a, b) => {\r\n            if (a[sortConfig.key] < b[sortConfig.key]) return sortConfig.direction === 'asc' ? -1 : 1;\r\n            if (a[sortConfig.key] > b[sortConfig.key]) return sortConfig.direction === 'asc' ? 1 : -1;\r\n            return 0;\r\n        }) || [];\r\n    }\r\n\r\n    console.log(sortedData, \"========sortedData\");\r\n    return sortedData;\r\n};\r\nconst trimmingDisplayContent = (ERPErrorDescription = null) => {\r\n    let newERPErrorDescriptionVal = ERPErrorDescription;\r\n    if (Array.isArray(ERPErrorDescription)) {\r\n        newERPErrorDescriptionVal = newERPErrorDescriptionVal?.flat()?.join();\r\n    }\r\n    newERPErrorDescriptionVal = newERPErrorDescriptionVal?.replaceAll('/', '')\r\n        .replaceAll('[', '')\r\n        .replaceAll(']', '')\r\n        .replaceAll('\"', '')\r\n        .replaceAll('\"', '');\r\n    return newERPErrorDescriptionVal;\r\n}\r\nconst getIsMaterialFormEdited = async () => {\r\n    const getStorevalue = Store.getState();\r\n    const isMaterialFormEdited = getStorevalue?.mcoDetails?.isMaterialFormEdited || false;\r\n    return isMaterialFormEdited;\r\n}\r\nconst handleErrorForThrows = (err, context) => {\r\n    // Log the error with additional context\r\n    console.error(`Error in ${context}:`, err);\r\n    // Optionally, you can integrate with an error tracking service like Sentry\r\n    // Sentry.captureException(err);\r\n    // Notify the user (you can customize this)\r\n    // alert('An error occurred while processing your request. Please try again later.');\r\n};\r\n\r\nexport {\r\n    formatDate,\r\n    fetchRSMEAndRMEDetails,\r\n    CloneDataFromMaster,\r\n    prepareItemPayload,\r\n    prepareBomPayload,\r\n    prepareTargetInfo,\r\n    updateFinalAcksDetails,\r\n    callLoggingInfo,\r\n    prepareFormData,\r\n    deepClone,\r\n    validationChecks,\r\n    initialMRFunctions,\r\n    specificationfileterfunction,\r\n    collectSourcePlantTemplate,\r\n    updateMcoDetailsInDatabase,\r\n    prepareFormDataForMassUpdate,\r\n    handleMaterialTypeSelect,\r\n    findLabelForTooltip,\r\n    findDropdownValue,\r\n    prepareAffectedPartData,\r\n    exportMCOData,\r\n    sortAffData,\r\n    trimmingDisplayContent,\r\n    getAffectedPartsData,\r\n    getIsMaterialFormEdited,\r\n    handleErrorForThrows\r\n}"],"names":["findMRTemplateByPart","mrLists","arguments","length","undefined","partInfo","Object","keys","includes","name","findBusinessUnitByPlant","buLists","businessUnit","find","fitem","getHighestSeqCurrentPendingOrActiveMRForPart","_getStorevalue$mcoDet","_Object$keys","partName","getStorevalue","Store","getState","mrDetails","mcoDetails","retunedMRS","getHighestSeqCurrentPendingOrActiveMR","forEach","eachMR","plantName","partAndPlant","split","getMVONotAllowedToHaveEBOMValues","templateMappingsInfo","filter","item1","_item1$details","_item1$details$EBOM_A","MappingType","BUID","details","EBOM_Allowed","toUpperCase","map","titem","_titem$details","ALLOWABLE_ORG_TEMPLATES","primaryToPurchageValidationMapping","purchageValidationMapping","_item1$details2","Entity","_purchageValidationMa","primaryToPurchagePlants","PLANT","eachKey","groupByValues","anyObject","_Object$keys2","purchagetoPrimaryMap","Map","purchageValue","has","value","get","set","getRDOOUOrgSetMappings","_buplantmapping_RDOCh","_buplantmapping_RDOCh2","_plantGroups","_plantGroups$details","plantToMatch","buplantmapping_RDOChecks","acitem","_acitem$details","plantGroups","_item1$details3","OUgroupMap","matchedPlantsSet","values","key","filteredPlants","plant","toLowerCase","getOrgAllowedTemplateMappingForPlant","partType","finalTemplates","orgAllowedTemplatesForPlant","_item1$details4","_item1$details5","Plants","getPartTypeDetails","parttypetotemplateArr","ENGG_ITEM_TYPE","templatesMappingsArr","_parttypetotemplateAr","_parttypetotemplateAr2","allowableOrgTemplates","item2","_item1$details6","org_allowed_template","push","_getPartTypeDetails$m","_flatenPartTypeTempla","flatenPartTypeTemplates","partTypeTemplate","_partTypeTemplate$det","flat","templatesForAllTypes","eachRec","_eachRec$exclusive_us","exclusive_use","template","eachTemplate","_eachTemplate$details","_templatesMappingsArr","tItem","_tItem$details","getMVOTemplateCompatibilityOracleTemplates","_ref2","templateName","MVOTemplateCompatibilityOracleTemplates","_item1$details8","MVO_TEMPLATE_OPTION","_MVOTemplateCompatibi","_MVOTemplateCompatibi2","_MVOTemplateCompatibi3","_MVOTemplateCompatibi4","fiItem","_fiItem$status","status","ALLOWABLE_ORG_TEMPLATE","dropdownValidation","async","orgAllowedTemplateMappingsList","templates","ORGAllowedTemplateMappings","businessUnitInfo","businessUnitList","combineAllErrors","childPartAndWhereUsedMRDetails","collectChildParts","collectWhereUsedInParts","responseData","mcoaffectedItem","eachChildItem","_eachChildItem$childI","_eachChildItem$whereU","collectChildPartName","childInfo","eachparts","_responseData$mcoProp","_responseData$mcoProp2","partsDetailsArr","mcoPropeties","collectUsedInPartName","whereUsedInfo","whereUsedparts","_responseData$mcoProp3","_responseData$mcoProp4","whereUsedpartsDetailsArr","mcoService","MCOService","instanceVal","localStorage","getItem","getChildPartDetails","childParts","whereUsedInParts","instance","eachItem","_responseData$mcoProp5","_activeMRInfo$ERPStat","_activeMRInfo$ERPStat4","collectErrors","currentPartBuInfo","organization","mcoData","MCOPlantName","partTypeDisplayName","displayType","activeMRInfo","activeMR","previousSeqMRInfo","previousSeqMR","getHighestSeqCurrentOrActiveMR","whereUsedMRinfo","whereUsedChecks","whereUsedLists","_fitem$makeOrBuy","makeOrBuy","bHasPrependingActiveMRs","ERPStatus","MVOOracleTemplate","_responseData$mcoProp6","msgtemplate","errorMessages","msgReplacementArr","formattedMessage","formatMessage","Number","sequence","_eachItem$revision","_responseData$mcoProp7","_getCurrentPartBuInfo","pattern","matches","revision","match","getCurrentPartBuInfo","oracleExisting","some","etemplate","_responseData$mcoProp8","_activeMRInfo$ERPStat2","_previousSeqMRInfo$ER","_activeMRInfo$ERPStat3","_eachItem$whereUsedIn","_whereUsedMRinfo","_responseData$mcoProp9","whereUsedParts","join","_eachItem$whereUsedIn2","_whereUsedMRinfo2","onMBOM_NoTemplatesList","tmitem","_tmitem$details","On_MBOM","etemp","_etemp$details","_eachItem$childInfo","_currentPartBuInfo$ma","_eachItem$childInfo2","makeWithoutBOMList","checkTemplateExists","currPartChilddetails","slChildrenWithoutMR","slChildNotAllowedOnMBOM","cfitem","childPartName","mrData","eachTempRec","_eachTempRec$details","_errorMessages$messag","childMessage","validationMessages","CHILD_PART_MR_NOT_ASSIGNED","_errorMessages$messag2","_errorMessages$messag3","NotAllowedOnMBOMChildren","_activeMRInfo$ERPStat5","mvoAllowedTemplates","bMVOTemplateFromToIsAllowed","fromToMVOAllowedChanges","_ref","prevTemplateName","fromTOmvoAllowedChangesOracleTemplates","_item1$details7","MVO_TEMPLATE_FROM","_fromTOmvoAllowedChan","_fromTOmvoAllowedChan2","_fromTOmvoAllowedChan3","MVO_TEMPLATES_TO","MVO_TEMPLATE_TO","getFromTOmvoAllowedChangesOracleTemplates","mvoTemplateCompatibleTemplates","currentMVOOracleTemplate","mvoTemplateCompatible","allPlantsWithActiveMR","highestSeqCurrentPendingOrActiveMRForPart","_activeMRInfo$ERPStat6","allowedOracleTemplateValues","sOracleTemplate","currentMRSequence","_responseData$mcoProp10","partMakeOrBuyValue","checkIsplantExistOrNot","plants","buPlant","orgAllowedTemplates","primaryToPurchageMapping","mustBeAssignedToPurchageValidationPlantTemplates","_item1$details9","_item1$details9$PO_Or","PO_Org_Exist_Check","getMustBeAssignedToPurchaseValidationPlantList","eachRecord","_eachRecord$details","primaryToPurchageValidation","purchageToPrimaryValidationMapping","isAssignedToPrimary","_responseData$mcoProp11","_getCurrentPartBuInfo2","primaryPlants","eachPrimary","primaryPlantsStr","purchagePlant","partBU","OracleTemplate","plantPair","_templatesFromEachRDO","templatesFromEachRDOOUPlants","RDOPlanttemplates","eachPlant","hasMR","RDOPlantTemplateName","getMappedTemplatesList","_item1$details10","TEMPLATE_ORG_EXISTING","_getMappedTemplatesLi","_getMappedTemplatesLi2","_getMappedTemplatesLi3","TEMPLATE_ORG_MODIFYING","getSetCompatibleTemplates","valid","errDesc","fetchRSMEAndRMEDetails","getRSMEList","then","ritem","splitValues","label","id","email","rsmeList","getRMEList","rmeList","dispatch","update_generalValues","RSMEList","RMEList","catch","err","isPageHavingIssue","CloneDataFromMaster","locresData","masterAttData","new_mcoPropeties","msInformation","_msInformation$mcoPro","_msInformation$mcoPro2","_msInformation$mcoPro3","_msInformation$mcoPro4","_msInformation$mcoPro5","_msInformation$mcoPro6","startdate","mcoProperties","rme","rsme","prepareItemPayload","plantData","sourceData","source","templateList","getTargetInfo","prepareTargetInfo","itemData","getItemDetailsByMcoId","affectedPartsData","getAffectedPartsData","affectedItems","gitem","filteredAffItem","material","filteredAffItemDetail","_getTargetInfo$plantI","materialType","attributes","attributeMap","plantInfo","isMaster","thisTemp","_gitem$materialType","aitem","_gitem$attributeGroup","targetKey","sourceValue","attributeGroupData","findingMappingValues","attritem","findingMappingValues2","target","targetInfo","error","_responseData$source","org_id","organizationId","sourceUrl","url","currplantName","orgarr","ERPType","generateTargetInfo","findPlantInfo","findTargetInfo","_targetInfo","_targetInfo2","_targetInfo3","environment","_findPlantInfo","_targetInfo4","_targetInfo5","_findPlantInfo2","_findPlantInfo2$Conne","_findPlantInfo3","_findPlantInfo3$Conne","_findPlantInfo4","_findPlantInfo4$Conne","_findPlantInfo5","_findPlantInfo5$Conne","_findPlantInfo6","_findPlantInfo6$Conne","_findPlantInfo$bomusa","_findPlantInfo7","findPlantName","aliasPlant","system","ConnectivityDetails","username","password","authkey","port","sapsysnum","sapclientid","bomusage","prepareFormData","data","labelArr","mcostate","responseFromErp","description","ECOExportToERP","requiredFields","item","hasOwnProperty","prepareFormDataForMassUpdate","validateForm","vType","errors","console","log","currentDate","Date","setHours","parts","startDate","_values$rme","_values$rsme","validationChecks","errorsOfPropertiesForm","colErrorsArr","gkey","_gitem$materialType2","SAP","templateUnassigned","_errorMessages$messag4","ORACLE","collectSourcePlantTemplate","resData","getMasterDatails","_resData$mcoPropeties","_resData$mcoPropeties2","_resData$source","_getMasterDatails$","_resData$mcoPropeties3","_resData$mcoPropeties4","sptPayload","materialDataArr","getSourcePlantTemplate","respdata","_resData$mcoPropertie","_getMasterDatails$2","_getMasterDatails$3","_getMasterDatails$4","_resData$mcoPropeties6","_respdata$templateMap","_resData$mcoPropeties9","_resData$mcoPropeties5","merge_templates","_resData$mcoaffectedI","_resData$mcoaffectedI2","_resData$mcoPropeties7","_resData$source2","_getMasterDatails$5","_resData$mcoaffectedI3","_resData$mcoaffectedI4","_resData$mcoPropeties8","mastersptPayload","relatedMCOs","respdata2","concat","final_spt","materialData","initialMRFunctions","_locresData$mcoPropet","_locresData$mcoPropet2","_locresData$mcoPropet6","_locresData$mcoPropet7","getMrPayload","_locresData$mcoaffect","_locresData$mcoPropet3","_locresData$mcoPropet4","_locresData$mcoPropet5","mcoId","mcoName","partId","targetPlant","_locresData$mcoPropet8","orgId","masterMapping","generalInfo","masterPlantName","_locresData$mcoPropet9","_locresData$mcoPropet10","_locresData$mcoPropet11","getMRbyPartAndPlant","collectAndStoreMRDetails","mrPayload","getBusinessUnitbyid","allPartsBusinessUnitDetails","resp","collectAllPartBUDetails","_resData$mcoPropeties10","inst","payload","systemSettingsService","SystemSettingsService","getSystemSettingsbyid","systemSetingsDetail","collectSystemSettingsDetails","_resData$mcoPropeties11","_resData$mcoPropeties12","currentMCOName","currentMCOPlantdetails","parentMCOName","replace","getMcoDetailsByName","_resp$parentMCOName","_resp$parentMCOName$m","parentMCODetails","collectParentMCODetails","updateMcoDetailsInDatabase","updatedPropetiesValue","saveMode","getpayloadData","getattributesbyid","payloadData","_responseData$mcoProp12","_responseData$mcoProp13","_responseData$mcoProp14","_responseData$mcoProp15","_responseData$mcoProp16","producthub","uniquePartId","updateOrAddAttribute","updateFunction","updateattributesbyid","addattributes","getUpdateResponse","updateResData","updateMcoDetails","prepareAffectedPartData","message","_getStorevalue$mcoDet2","handleMaterialTypeSelect","selectedValue","thisRowId","dropType","thisRowIndex","findIndex","foption","_findMaterialName","_findMaterialName2","_mcoaffectedItem$this","findMaterialName","partBusinessUnitValue","buplantmapping_RDOPlants","_acitem$BUID","hasMbomTemplateList","_acitem$BUID2","_acitem$details2","_acitem$details2$Has_","Has_MBOM","eitem","_eitem$details","isExceptionalPlant","hasMbomTemplate","_findMaterialName3","_buplantmapping_RDOPl","_responseData$mcoProp17","plantValue","getPlantList","ekeys","_plantValue$ekeys","newRevision","oldRevision","currentSequence","isMaterialFormEdited","findLabelForTooltip","findMaterialDetails","selectedOption","option","findDropdownValue","affval","masterData","master","_masterData$mcoaffect","_findMaterialDetails","affkey","_masterData$mcoaffect2","_masterData$mcoaffect3","_findMaterialDetails2","_affval$materialType","_affval$attributeGrou","desc","ERPItemTypeTemplate","_responseData$mcoaffe2","eachTemplateOptions","dropdownOpts","_window","_responseData$mcoaffe3","window","ExternalClass","affectedItemsInfo","externalClass","getDropdownOptions","_thisDropOptions","_Object$keys3","_Object$keys4","_Object$keys5","_mrDetails$activeMR","_mrDetails$activeMR$a","_Object$keys6","_Object$keys7","_Object$keys8","_mrDetails$activeMR2","_mrDetails$previousSe","_Object$keys9","_thisDropOptions2","_Object$keys10","_Object$keys11","_Object$keys13","_affval$itemStatus","thisDropOptions","templExistOrNot","mtemp","prevSelectedTemplateObj","_findMaterialDetails3","Name","activeMRData","additionalSequence","previousSeqMRData","activeMRtemplExistOrNot","_findMaterialDetails4","activeTemplateObj","_findMaterialDetails5","isTemplateValueChange","defaultOptValue","_Object$keys12","previousSeqMRTemplateObj","findex","_thisDropOptions3","_Object$keys14","_Object$keys15","_Object$keys16","isRevisionTempExist","fcheckItem","_findMaterialDetails6","_findMaterialDetails7","getExportToERPValue","exportToERP","getItemStatusValue","itemStatus","_activeMRData$ERPStat","isExportToERPValueChange","isItemStatusValueChange","exportMCOData","propertiesData","exportAffectedPartsData","_mcoaffectedItemVal","currentMcoDetails","mcoaffectedItemVal","sortAffData","direction","new_mcoaffectedItemVal","_ErpStatus","_ErpStatus$","ErpStatus","itemERPStatus","efitem","Item_Name","ERPstatus","ERPErrorDescription","sortConfig","sortedData","sort","a","b","_a$materialType","_b$materialType","_a$materialType2","_b$materialType2","trimmingDisplayContent","_newERPErrorDescripti3","newERPErrorDescriptionVal","_newERPErrorDescripti","_newERPErrorDescripti2","Array","isArray","replaceAll","getIsMaterialFormEdited","_getStorevalue$mcoDet3","handleErrorForThrows","context"],"sourceRoot":""}