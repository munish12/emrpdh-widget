{"version":3,"file":"static/js/924.6ce649cc.chunk.js","mappings":"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","sources":["app/views/mcolist/MyReports.jsx"],"sourcesContent":["import { Breadcrumb, SimpleCard } from \"app/components\";\r\nimport React, { useEffect, useState, useRef, useCallback } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport DataGrid from \"@inovua/reactdatagrid-community\";\r\nimport \"@inovua/reactdatagrid-community/index.css\";\r\nimport {\r\n  Box,\r\n  styled,\r\n  Grid,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle\r\n} from \"@mui/material\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport CustomAlertBox from \"app/components/CustomAlertBox\";\r\nimport { MassUpdate } from \"services/massUpdateService\";\r\nimport { BACKEND_API_URL } from \"config\";\r\n\r\nconst Container = styled(\"div\")(({ theme }) => ({\r\n  margin: \"30px\",\r\n  [theme.breakpoints.down(\"sm\")]: { margin: \"16px\" },\r\n  \"& .breadcrumb\": {\r\n    marginBottom: \"30px\",\r\n    [theme.breakpoints.down(\"sm\")]: { marginBottom: \"16px\" },\r\n  },\r\n}));\r\n\r\nconst MyReport = () => {\r\n  const [tabledata, setTabledata] = useState([]);\r\n  const [filteredTabledata, setFilteredTabledata] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const gridStyle = { minHeight: 550 };\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [selected, setSelected] = useState({});\r\n  const [deleteDialog, setDeleteDialog] = useState(false);\r\n  const massUpdate = new MassUpdate();\r\n  const [refreshData, setRefreshData] = useState(false)\r\n  const [openAlert, setOpenAlert] = useState(false);\r\n  const [openDesc, setOpenDesc] = useState(null);\r\n  const gridRef = useRef(null);\r\n  const dataMap = gridRef && gridRef.current && gridRef.current.dataMap ? gridRef.current.dataMap : null;\r\n  const columns = [\r\n    {\r\n      name: \"fileName\",\r\n      header: \"File Name\",\r\n      defaultFlex: 1.5,\r\n      defaultWidth: 20,\r\n      render: ({ data }) => <div>{data?.fileName}</div>,\r\n    },\r\n    {\r\n      name: \"createdDate\",\r\n      header: \"Created Date\",\r\n      defaultFlex: 1.5,\r\n      defaultWidth: 200,\r\n      render: ({ data }) => <div>{data?.createdDate}</div>,\r\n    }\r\n  ];\r\n  const onSelectionChange = useCallback(({ selected }) => {\r\n    setSelected(selected);\r\n  }, []);\r\n  useEffect(() => {\r\n    const selRowsData = selected === true ? dataMap : selected;\r\n    const selRowsDetails = (selRowsData) && Object.keys(selRowsData).map(key => (selRowsData[key]));\r\n    setSelectedRows(selRowsDetails);\r\n  }, [selected, dataMap]);\r\n\r\n  const handleRefresh = () => {\r\n    setRefreshData(!refreshData)\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    massUpdate.getMyReport().then((result) => {\r\n      if (Array.isArray(result?.data)) {\r\n        setTabledata(result?.data);\r\n        setFilteredTabledata(result?.data);\r\n      }\r\n      setIsLoading(false);\r\n    });\r\n  }, [refreshData]);\r\n\r\n\r\n  useEffect(() => {\r\n    let filteredData = tabledata;\r\n    setFilteredTabledata(filteredData);\r\n  }, [tabledata])\r\n\r\n  const handleDeleteDialog = () => {\r\n    setDeleteDialog(true);\r\n  };\r\n  const handleDownloadReport = () => {\r\n    window.open(`${BACKEND_API_URL}/${selectedRows[0]?.filePath}`)\r\n\r\n  };\r\n  const handleDeleteSource = async () => {\r\n    try {\r\n      const selRowsId = selectedRows?.map(item => (item?.filePath));\r\n      await massUpdate.deleteReport(selRowsId).then(response => {\r\n        setOpenAlert(true);\r\n        setOpenDesc({\r\n          severity: response?.status,\r\n          desc: response?.msg,\r\n        });\r\n        setSelected({});\r\n        setSelectedRows([]);\r\n        setDeleteDialog(false);\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Failed to delete BU:\", error);\r\n      setDeleteDialog(false);\r\n    }\r\n    setRefreshData(!refreshData)\r\n  };\r\n  const handleCloseDelete = () => {\r\n    setDeleteDialog(false);\r\n  };\r\n  return (\r\n    <Container>\r\n      <Box className=\"breadcrumb\">\r\n        <Breadcrumb routeSegments={[{ name: \"My Report\" }]} />\r\n      </Box>\r\n\r\n      <SimpleCard>\r\n        <Grid container spacing={1} alignItems=\"center\">\r\n          <Grid item md={12} sm={12} xs={12} className=\"font-medium\" alignItems=\"right\" >\r\n            <Grid container spacing={1} alignItems=\"right\">\r\n              <Grid item md={6} sm={6} xs={12} className=\"font-medium\">\r\n                <Button variant=\"contained\" onClick={handleRefresh}>\r\n                  Refresh\r\n                </Button>\r\n              </Grid>\r\n              <Grid item md={6} sm={6} xs={12} className=\"font-medium\">\r\n                <Grid container alignItems=\"center\"\r\n                  style={{\r\n                    textAlign: \"right\"\r\n                  }}\r\n                >\r\n                  <Grid\r\n                    item\r\n                    md={12}\r\n                    sm={12}\r\n                    xs={12}\r\n                    className=\"font-medium\"\r\n                    style={{ paddingRight: \"10px\" }}\r\n                  >\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      disabled={selectedRows?.length === 1 ? false : true}\r\n                      onClick={handleDownloadReport}\r\n                      style={{ margin: '0 0px 0 10px' }}\r\n                    >\r\n                      Download\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      disabled={selectedRows?.length !== 0 ? false : true}\r\n                      onClick={handleDeleteDialog}\r\n                      style={{ margin: '0 0px 0 10px' }}\r\n                    >\r\n                      Delete\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Box width=\"100%\" overflow=\"auto\" marginTop=\"10px\">\r\n            {isLoading && (\r\n              <Box\r\n                sx={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  height: \"100vh\",\r\n                }}\r\n              >\r\n                <CircularProgress />\r\n              </Box>\r\n            )}\r\n            {!isLoading && (\r\n              <DataGrid\r\n                idProperty=\"id\"\r\n                showZebraRows={false}\r\n                style={gridStyle}\r\n                columns={columns}\r\n                dataSource={filteredTabledata}\r\n                // rowHeight={null}\r\n                checkboxColumn\r\n                selected={selected}\r\n                defaultLimit={100}\r\n                sortable={false}\r\n                onSelectionChange={onSelectionChange}\r\n                handle={ref => gridRef.current = ref ? ref?.current : null}\r\n                pagination\r\n                renderScroller={()=> gridRef?.current?.setScrollTop(selectedRows?.length==0 ? 0 : gridRef?.current?.getScrollTop())}\r\n                />\r\n            )}\r\n          </Box>\r\n        </Grid>\r\n      </SimpleCard>\r\n      {(openDesc) ? (\r\n        <CustomAlertBox openAlert={openAlert} openDesc={openDesc} setOpenAlert={setOpenAlert} />\r\n      ) : (<></>)}\r\n      <Dialog open={deleteDialog}>\r\n        <DialogTitle style={{ cursor: \"move\" }} id=\"draggable-dialog-title\">\r\n          Delete Mass Update Report\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {\r\n            (<>\r\n              <DialogContentText>\r\n                Do you want to delete the seleted Report(s)?\r\n              </DialogContentText>\r\n            </>)\r\n          }\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleCloseDelete}>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleDeleteSource}>delete</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MyReport;\r\n"],"names":["Container","styled","_ref","theme","margin","breakpoints","down","marginBottom","MyReport","tabledata","setTabledata","useState","filteredTabledata","setFilteredTabledata","isLoading","setIsLoading","selectedRows","setSelectedRows","selected","setSelected","deleteDialog","setDeleteDialog","massUpdate","MassUpdate","refreshData","setRefreshData","openAlert","setOpenAlert","openDesc","setOpenDesc","gridRef","useRef","dataMap","current","columns","name","header","defaultFlex","defaultWidth","render","_ref2","data","_jsx","children","fileName","_ref3","createdDate","onSelectionChange","useCallback","_ref4","useEffect","selRowsData","selRowsDetails","Object","keys","map","key","getMyReport","then","result","Array","isArray","_jsxs","Box","className","Breadcrumb","routeSegments","SimpleCard","Grid","container","spacing","alignItems","item","md","sm","xs","Button","variant","onClick","handleRefresh","style","textAlign","paddingRight","disabled","length","handleDownloadReport","_selectedRows$","window","open","BACKEND_API_URL","filePath","handleDeleteDialog","width","overflow","marginTop","sx","display","justifyContent","height","CircularProgress","DataGrid","idProperty","showZebraRows","minHeight","dataSource","checkboxColumn","defaultLimit","sortable","handle","ref","pagination","renderScroller","_gridRef$current","_gridRef$current2","setScrollTop","getScrollTop","CustomAlertBox","_Fragment","Dialog","DialogTitle","cursor","id","DialogContent","DialogContentText","DialogActions","autoFocus","handleCloseDelete","async","selRowsId","deleteReport","response","severity","status","desc","msg","error","console"],"sourceRoot":""}