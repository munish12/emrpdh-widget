{"version":3,"file":"static/js/429.b8c2d693.chunk.js","mappings":"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","sources":["app/components/McoPages/CustomDateTimePickerToolbar.jsx","app/components/McoPages/InprogressIcon.jsx","app/components/McoPages/CaDetailTable.jsx","app/components/McoPages/MassUpdateForm.jsx","app/views/mcolist/CaDetails.jsx"],"sourcesContent":["import React from 'react';\r\nimport { DateTimePickerToolbar } from '@mui/x-date-pickers/DateTimePicker';\r\nimport Button from '@mui/material/Button';\r\nimport Box from '@mui/material/Box';\r\nimport dayjs from 'dayjs';\r\n\r\nconst CustomDateTimePickerToolbar = (props) => {\r\n    const { setOpenView, setView, onChange, value, ...other } = props;\r\n\r\n    const handleTodayButtonClick = () => {\r\n        const today = dayjs();\r\n        onChange(today);\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n            <DateTimePickerToolbar {...props} />\r\n            <Button onClick={handleTodayButtonClick} variant=\"outlined\" size=\"small\" style={{ margin: '8px', position: 'absolute', bottom: \"2.5px\", left: \"2.5px\" }}>\r\n                Today\r\n            </Button>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default CustomDateTimePickerToolbar;\r\n","import React from 'react';\r\nimport SyncIcon from '@mui/icons-material/Sync';\r\nimport AutorenewIcon from '@mui/icons-material/Autorenew';\r\nimport { Box } from '@mui/material';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nfunction RotatingInProgressIcon({ title }) {\r\n    return (\r\n        <>\r\n            <Tooltip title={title}>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center',\r\n                        position: 'absolute',\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: '100%',\r\n                        // height: '100%',\r\n                        // backgroundColor: 'rgba(255, 255, 255, 0.7)',\r\n                        zIndex: 9,\r\n                    }}\r\n                >\r\n                    <AutorenewIcon\r\n                        sx={{\r\n                            fontSize: 60,\r\n                            color: '#1976d2',\r\n                            animation: 'spin 1.5s linear infinite',\r\n                            width: \"25px\",\r\n                            height: \"25px\",\r\n                            position: \"absolute\"\r\n                        }}\r\n                    />\r\n                    <style>\r\n                        {`\r\n          @keyframes spin {\r\n            0% { transform: rotate(0deg); }\r\n            100% { transform: rotate(360deg); }\r\n          }\r\n        `}\r\n                    </style>\r\n                </Box>\r\n            </Tooltip>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RotatingInProgressIcon;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Box,\r\n  styled,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { Link } from 'react-router-dom';\r\nimport shortId from 'shortid';\r\nimport PropTypes from 'prop-types';\r\nimport dayjs from 'dayjs';\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\r\nimport ErpStatusReasonDialogBox from './ErpStatusReasonDialogBox';\r\nimport RotatingInProgressIcon from './InprogressIcon';\r\n\r\nconst StyledTable = styled(Table)(() => ({\r\n  whiteSpace: \"pre\",\r\n  \"& thead\": {\r\n    \"& tr\": { \"& th\": { paddingLeft: 0, paddingRight: 0 } },\r\n  },\r\n  \"& tbody\": {\r\n    \"& tr\": { \"& td\": { paddingLeft: 0, textTransform: \"capitalize\" } },\r\n  },\r\n}));\r\n\r\nconst displayValue = (val) => {\r\n  if (val) {\r\n    return val;\r\n  } else {\r\n    return \"-\";\r\n  }\r\n}\r\nconst displayERPValue = (val) => {\r\n  if (!val || typeof val !== 'object') {  \r\n      return \"-\";\r\n  }\r\n  return val?.ERPstatus ?? \"-\";\r\n};\r\n\r\nconst iconColorCodes = {\r\n  \"success\": \"limegreen\",\r\n  \"failed\": \"red\",\r\n  \"inprogress\": \"grey\",\r\n}\r\n\r\nconst CaDetailTable = (props) => {\r\n  const {\r\n    allCaMCODetails,\r\n    caLifeCycleData\r\n  } = useSelector((state) => ({\r\n    allCaMCODetails: state.mcoDetails.allCaMCODetails,\r\n    caLifeCycleData: state.mcoDetails.caLifeCycleData,\r\n  }), shallowEqual);\r\n\r\n  let { mcolistsArr, selected, setSelected, caRelatedEachMCODetails, selectedData, setSelectedData  } = props;\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(100);\r\n  const [mcolists, setMcolists] = useState(mcolistsArr || []);\r\n\r\n  const [erpStatusReasonDialogBox, setErpStatusReasonDialogBox] = useState(false);\r\n  const [selectedMCO, setSelectedMCO] = useState(null);\r\n  const [showInprogressColumn, setShowInprogressColumn] = useState(false);\r\n  const handleERPStatusReason = () => {\r\n    setErpStatusReasonDialogBox(true);\r\n  }\r\n  const updateERPStatusReason = () => {\r\n    setErpStatusReasonDialogBox(false);\r\n  }\r\n  const handleChangePage = (_, newPage) => {\r\n    setPage(newPage);\r\n    setSelected([]);\r\n    setSelectedData([]);\r\n  };\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n\r\n  // --------------CHECKBOX FUNC START---------------\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const mvoItems = mcolists.filter((n) => n.name.includes(\"MVO\"));\r\n      const otherItems = mcolists.filter((n) => !n.name.includes(\"MVO\"));\r\n      const newSelected = [...mvoItems, ...otherItems].map((n) => n.id);\r\n      const newSelectedData = [...mvoItems, ...otherItems];\r\n      setSelected(newSelected);\r\n      setSelectedData(newSelectedData);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n    setSelectedData([]);\r\n  };\r\n  const isSelected = (id) => selected.indexOf(id) !== -1;\r\n  const instance = localStorage.getItem('instance');\r\n  const handleClick = (event, id) => {\r\n    const selectedIndex = selected.indexOf(id);\r\n    let newSelected = [];\r\n    let newSelectedData = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      const selectedItem = mcolists.find((n) => n.id === id);\r\n      if (selectedItem.name.includes(\"MVO\")) {\r\n        newSelected = [id, ...selected];\r\n        newSelectedData = [selectedItem, ...selectedData];\r\n      } else {\r\n        newSelected = newSelected.concat(selected, id);\r\n        newSelectedData = newSelectedData.concat(selectedData, selectedItem);\r\n      }\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n      newSelectedData = newSelectedData.concat(selectedData.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n      newSelectedData = newSelectedData.concat(selectedData.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n      newSelectedData = newSelectedData.concat(\r\n        selectedData.slice(0, selectedIndex),\r\n        selectedData.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n    setSelected(newSelected);\r\n    setSelectedData(newSelectedData);\r\n  };\r\n  // --------------CHECKBOX FUNC END---------------\r\n\r\n  useEffect(() => {\r\n    const mcoFilterList = (mcolistsArr?.length) ? (mcolistsArr.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)) : [];\r\n    setMcolists(mcoFilterList);\r\n    if (mcolists?.find(eitems => caLifeCycleData?.[eitems?.name]?.promoted === \"inprogress\")) {\r\n      setShowInprogressColumn(true);\r\n    } else {\r\n      setShowInprogressColumn(false);\r\n    }\r\n  }, [page, rowsPerPage, mcolistsArr, allCaMCODetails, selected])\r\n\r\n  useEffect(() => {\r\n    const newSelectedData = selected.map(id => mcolists.find(item => item.id === id));\r\n    setSelectedData(newSelectedData);\r\n  }, [selected, mcolists, setSelectedData]);\r\n\r\n  return (\r\n    <Box width=\"100%\" overflow=\"auto\">\r\n      <StyledTable>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell padding=\"checkbox\">\r\n              <Checkbox\r\n                color=\"primary\"\r\n                indeterminate={selected.length > 0 && selected.length < mcolists.length}\r\n                checked={mcolists.length > 0 && selected.length === mcolists.length}\r\n                onChange={handleSelectAllClick}\r\n                inputProps={{\r\n                  'aria-label': 'select all desserts',\r\n                }}\r\n              />\r\n            </TableCell>\r\n            <TableCell align=\"left\" style={{ width: \"10%\", wordWrap: \"word-break\" }}>MCO Name</TableCell>\r\n            {\r\n              (showInprogressColumn) ? (\r\n                <TableCell align=\"left\" style={{ width: \"50px\", wordWrap: \"word-break\" }}></TableCell>\r\n              ) : (null)\r\n            }\r\n            <TableCell align=\"left\" style={{ width: \"10%\", wordWrap: \"word-break\" }}>RDO</TableCell>\r\n            <TableCell align=\"left\" style={{ width: \"5%\", wordWrap: \"word-break\" }}>State</TableCell>\r\n            <TableCell align=\"left\" style={{ width: \"5%\", wordWrap: \"word-break\" }}>Plant</TableCell>\r\n            <TableCell align=\"left\" style={{ wordWrap: \"word-break\" }}>Start Date</TableCell>\r\n            <TableCell align=\"center\" style={{ width: \"10%\", wordWrap: \"word-break\" }}>Export Status</TableCell>\r\n            <TableCell align=\"center\" style={{ wordWrap: \"word-break\" }}>Failed Integration Step</TableCell>\r\n            <TableCell align=\"left\" style={{ width: \"10%\", wordWrap: \"word-break\" }}>Resp. Mfg Eng.</TableCell>\r\n            <TableCell align=\"left\" style={{ wordWrap: \"word-break\" }}>Resp. Senior Mfg Eng.</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {\r\n            (mcolists?.length) ? (\r\n              mcolists.map((subscriber, index) => {\r\n                const mcoName = subscriber.name;\r\n                // const mcoDetails = (caRelatedEachMCODetails && Object.keys(caRelatedEachMCODetails).length) ? caRelatedEachMCODetails[mcoName] : null;\r\n                const isItemSelected = isSelected(subscriber.id);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                let caMCOLists = allCaMCODetails || {};\r\n                let currentMCODetails = {};\r\n                if (Object.keys(caMCOLists)?.length) {\r\n                  currentMCODetails = caMCOLists?.[mcoName];\r\n                }\r\n                // let startDateValue = \"\";\r\n                // if (mcoDetails?.mcoPropeties?.startdate !== \"\") {\r\n                //   startDateValue = dayjs(mcoDetails?.mcoPropeties?.startdate).format(\r\n                //     \"MM/DD/YYYY\"\r\n                //   );\r\n                // }\r\n                return (\r\n                  <TableRow key={shortId.generate()} onClick={(event) => handleClick(event, subscriber.id)}>\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          'aria-labelledby': labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">\r\n                    <Link \r\n                      to={`/mcodetail/${instance === 'onPrem' \r\n                        ? subscriber?.title \r\n                        : (subscriber?.type === \"Route\" ? subscriber?.parentMcoId : subscriber?.id)\r\n                      }`}\r\n                      style={{ color: '#1976d2' }}\r\n                      onClick={() => {\r\n                        if (\r\n                          subscriber?.type === \"Route\" &&\r\n                          subscriber?.parentMcoId &&\r\n                          subscriber?.plantType &&\r\n                          subscriber?.plantType !== \"\"\r\n                        ) {\r\n                          localStorage.setItem(\"plantType\", subscriber.plantType); // ✅\r\n                          localStorage.setItem(\"selectedRouteId\", subscriber.id); // ✅ new\r\n                        } else {\r\n                          localStorage.removeItem(\"plantType\");\r\n                          localStorage.removeItem(\"selectedRouteId\");\r\n                        }\r\n                      }}\r\n                    >\r\n                      {subscriber?.title}\r\n                    </Link>\r\n\r\n                    </TableCell>\r\n                    {\r\n                      (showInprogressColumn) ? (\r\n                        (caLifeCycleData?.[subscriber?.name]?.promoted === \"inprogress\") ? (\r\n                          <TableCell align=\"left\">\r\n                            <div style={{ position: \"relative\" }}>\r\n                              <RotatingInProgressIcon title={\"inprogress\"} />\r\n                            </div>\r\n                          </TableCell>\r\n                        ) : (\r\n                          <TableCell align=\"left\">\r\n                            {/* empty cell */}\r\n                          </TableCell>\r\n                        )\r\n                      ) : (null)\r\n                    }\r\n                    <TableCell align=\"left\">{subscriber?.businessUnit}</TableCell>\r\n                    <TableCell align=\"left\">{subscriber?.mcostate}</TableCell>\r\n                    <TableCell align=\"left\">{subscriber?.plantName}</TableCell>\r\n                    <TableCell align=\"left\">{subscriber?.startdate}</TableCell>\r\n                    <TableCell align=\"center\">{displayERPValue(currentMCODetails)}</TableCell>\r\n                    <TableCell align=\"center\">\r\n                      {\r\n                        (currentMCODetails && Object.keys(currentMCODetails || {})?.length && currentMCODetails?.ERPstatus) ? (\r\n                          <IconButton\r\n                            aria-label=\"close\"\r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              setSelectedMCO(currentMCODetails);\r\n                              handleERPStatusReason();\r\n                            }}\r\n                            sx={(theme) => ({\r\n                              position: 'relative',\r\n                              right: 0,\r\n                              top: 0,\r\n                              color: ([\"success\", \"failed\", \"inprogress\"]?.includes(currentMCODetails?.ERPstatus?.toLowerCase()) ? iconColorCodes?.[currentMCODetails?.ERPstatus?.toLowerCase()] : \"#1976d2\"),\r\n                            })}\r\n                          >\r\n                            <VisibilityIcon />\r\n                          </IconButton>\r\n                        ) : (\r\n                          <IconButton\r\n                            aria-label=\"close\"\r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                            }}\r\n                            sx={(theme) => ({\r\n                              position: 'relative',\r\n                              right: 0,\r\n                              top: 0,\r\n                              color: theme.palette.grey[500],\r\n                            })}\r\n                          >\r\n                            <VisibilityOffIcon />\r\n                          </IconButton>\r\n                        )\r\n                      }\r\n\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">{subscriber?.rme}</TableCell>\r\n                    <TableCell align=\"left\">{subscriber?.rsme}</TableCell>\r\n\r\n                    {/* <TableCell align=\"left\">{subscriber?.current}</TableCell>\r\n                    <TableCell align=\"left\">{subscriber['attribute[Plant ID]']}</TableCell>\r\n                    <TableCell align=\"left\">{displayValue(startDateValue)}</TableCell>\r\n                    <TableCell align=\"left\">{displayValue(mcoDetails?.mcoPropeties?.rme)}</TableCell>\r\n                    <TableCell align=\"left\">{displayValue(mcoDetails?.mcoPropeties?.rsme)}</TableCell>\r\n                    <TableCell align=\"left\">{displayValue(mcoDetails?.mcoPropeties?.description)}</TableCell> */}\r\n                  </TableRow>\r\n                )\r\n              })) : (\r\n              <TableRow key={shortId.generate()}>\r\n                <TableCell align=\"left\" colSpan={10} style={{ textAlign: 'center' }}>{'No result found!'}</TableCell>\r\n              </TableRow>\r\n            )\r\n          }\r\n        </TableBody>\r\n      </StyledTable>\r\n      {\r\n        (mcolistsArr?.length) ? (\r\n          <TablePagination\r\n            sx={{ px: 2 }}\r\n            page={page}\r\n            component=\"div\"\r\n            rowsPerPage={rowsPerPage}\r\n            count={mcolistsArr?.length}\r\n            onPageChange={handleChangePage}\r\n            rowsPerPageOptions={[100, 200, 300, 400, 500]}\r\n            onRowsPerPageChange={handleChangeRowsPerPage}\r\n            nextIconButtonProps={{ \"aria-label\": \"Next Page\" }}\r\n            backIconButtonProps={{ \"aria-label\": \"Previous Page\" }}\r\n          />\r\n        ) : (<></>)\r\n      }\r\n\r\n      {\r\n        (erpStatusReasonDialogBox) ? (\r\n          <>\r\n            <ErpStatusReasonDialogBox\r\n              erpStatusReasonDialogBox={erpStatusReasonDialogBox}\r\n              updateERPStatusReason={updateERPStatusReason}\r\n              selectedMCO={selectedMCO}\r\n              setSelectedMCO={setSelectedMCO}\r\n            />\r\n          </>\r\n        ) : (null)\r\n      }\r\n    </Box >\r\n  );\r\n};\r\n\r\nCaDetailTable.propTypes = {\r\n  mcolistsArr: PropTypes.array.isRequired,\r\n  setSelected: PropTypes.func.isRequired,\r\n  selected: PropTypes.array.isRequired,\r\n  selectedData: PropTypes.array.isRequired,\r\n  setSelectedData: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CaDetailTable;\r\n","import React, { useEffect, useState, useImperativeHandle, forwardRef } from 'react';\r\nimport {\r\n    Box,\r\n    Grid,\r\n    TextField,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    Radio,\r\n    RadioGroup,\r\n    Autocomplete\r\n} from \"@mui/material\";\r\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from \"@mui/material\";\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Select from '@mui/material/Select';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport shortId from 'shortid';\r\nimport { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\r\nimport dayjs from 'dayjs';\r\nimport CustomDateTimePickerToolbar from \"./CustomDateTimePickerToolbar\";\r\n\r\nconst formData = [\r\n    {\r\n        \"name\": \"PropertyFieldName\",\r\n        \"mandatory\": \"Y\",\r\n        \"dataType\": \"string\",\r\n        \"inputType\": \"select\",\r\n        \"defaultValues\": \"\",\r\n        \"values\": [\r\n            {\r\n                \"startdate\": \"Start date\",\r\n                \"rme\": \"RME\",\r\n                \"rsme\": \"RSME\",\r\n                \"description\": \"Description\",\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"name\": \"PropertyFieldValue\",\r\n        \"mandatory\": \"Y\",\r\n        \"dataType\": \"string\",\r\n        \"inputType\": \"text\",\r\n        \"defaultValues\": \"\",\r\n        \"values\": \"\"\r\n    },\r\n]\r\nconst ConfirmationDialog = ({ open, handleConfirmation, handleCancellation }) => {\r\n    return (\r\n        <Dialog open={open}>\r\n            <DialogTitle>Confirmation</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    Are you sure? Do you want to update the data for selected MCO's?\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleCancellation} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={handleConfirmation} color=\"primary\" autoFocus>\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst MassUpdateForm = forwardRef((props, ref) => {\r\n    const { RSMEList, RMEList } = useSelector((state) => state.mcoDetails);\r\n    const [formAllData, setFormAllData] = useState([]);\r\n    const [formValues, setFormValues] = useState({});\r\n    const [validFormValues, setValidFormValues] = useState({});\r\n    const [yubformData, setYubformData] = useState({});\r\n    const [isConfirmationOpen, setIsConfirmationOpen] = useState(false);\r\n\r\n    const handleSubmit = (e) => {\r\n        setIsConfirmationOpen(true);\r\n        setValidFormValues(e);\r\n    };\r\n    const handleConfirmation = () => {\r\n        props?.saveMassUpdateFormDetails(validFormValues);\r\n        setIsConfirmationOpen(false);\r\n    };\r\n\r\n    const handleCancellation = () => {\r\n        setIsConfirmationOpen(false);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        setFormAllData(formData);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let yupObj = {};\r\n        let formInitaialValues = {};\r\n        formAllData?.forEach((item) => {\r\n            const thisFieldName = item?.name;\r\n\r\n            if (item?.mandatory === \"Y\") {\r\n                yupObj[thisFieldName] = Yup.string().required(thisFieldName + ' required!');\r\n            }\r\n            if (item?.defaultValues !== \"\") {\r\n                formInitaialValues[thisFieldName] = item?.defaultValues;\r\n            } else {\r\n                formInitaialValues[thisFieldName] = '';\r\n            }\r\n        })\r\n        setYubformData(yupObj);\r\n        setFormValues(formInitaialValues);\r\n    }, [formAllData]);\r\n\r\n    const partsSchema = Yup.object().shape(yubformData);\r\n\r\n    const labelArr = {\r\n        startdate: \"Start date\",\r\n        rme: \"Responsible Manufacturing Engineer\",\r\n        rsme: \"Responsible Senior Manufacturing Engineer\",\r\n        description: \"Description\",\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={formValues}\r\n                onSubmit={handleSubmit}\r\n                enableReinitialize\r\n                validationSchema={partsSchema}\r\n                validateOnChange={false}\r\n                validateOnBlur={false}\r\n            >\r\n                {\r\n                    function Showform({\r\n                        values,\r\n                        errors,\r\n                        touched,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        handleSubmit,\r\n                        isSubmitting,\r\n                        setSubmitting,\r\n                        setFieldValue,\r\n                        validateForm,\r\n                        isValid,\r\n                        submitForm\r\n                    }) {\r\n                        useEffect(() => {\r\n                            setTimeout(async () => {\r\n                                // setFieldValue(thisFieldName, updateCurrFieldValue);\r\n                            }, 500);\r\n                        }, [setFieldValue])\r\n\r\n                        useImperativeHandle(ref, () => ({\r\n                            callsubmitForm() {\r\n                                submitForm();\r\n                                return isValid;\r\n                            },\r\n                        }));\r\n\r\n                        return (\r\n                            <form onSubmit={handleSubmit}>\r\n                                <div>\r\n                                    {\r\n                                        (formAllData).length ? formAllData?.map((item, fkey) => {\r\n                                            const thisInputName = item?.name;\r\n                                            const currentFieldValue = values[thisInputName] || item?.defaultValues;\r\n\r\n                                            let fieldType = item?.inputType;\r\n                                            let fieldkey = values[formAllData[0]?.name];\r\n                                            // skip if false\r\n                                            if (fkey > 0 && !([\"startdate\", \"rme\", \"rsme\", \"description\"].includes(fieldkey))) {\r\n                                                return true\r\n                                            }\r\n                                            // manually decide the field type\r\n                                            if (fkey > 0 && [\"startdate\"].includes(fieldkey)) {\r\n                                                fieldType = \"date\";\r\n                                            } else if (fkey > 0 && [\"rme\", \"rsme\"].includes(fieldkey)) {\r\n                                                fieldType = \"autocomplete\";\r\n                                            }\r\n\r\n                                            let filterValue = null;\r\n                                            if ([\"rme\", \"rsme\"].includes(fieldkey)) {\r\n                                                filterValue = (fieldkey === \"rme\" ? RMEList : RSMEList)?.find(\r\n                                                    (rmeFilter) => rmeFilter.key === currentFieldValue\r\n                                                );\r\n                                            }\r\n                                            return (\r\n                                                <div className=\"attribute-section\">\r\n                                                    <Grid\r\n                                                        container\r\n                                                        spacing={3}\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item md={4} sm={6} xs={12} className=\"font-medium\">\r\n                                                            <span >\r\n                                                                {(fkey > 0) ? labelArr[fieldkey] : item?.name}\r\n                                                                {item?.mandatory === \"Y\" ? <span style={{ color: \"red\" }}>*</span> : ''}\r\n                                                            </span>\r\n                                                        </Grid>\r\n                                                        <Grid item md={8} sm={6} xs={12}>\r\n                                                            {\r\n                                                                (fieldType === 'text') && (\r\n                                                                    <TextField\r\n                                                                        className={\"mb-4 w-full \"}\r\n                                                                        color={(errors?.[thisInputName] ? ('warning') : (''))}\r\n                                                                        fullWidth\r\n                                                                        size=\"small\"\r\n                                                                        variant=\"outlined\"\r\n                                                                        id={thisInputName}\r\n                                                                        name={thisInputName}\r\n                                                                        value={currentFieldValue}\r\n                                                                        onChange={(e) => {\r\n                                                                            setFieldValue(thisInputName, e.target.value);\r\n                                                                        }}\r\n                                                                        type=\"text\"\r\n                                                                        // disabled={isdisabled}\r\n                                                                        style={{ marginBottom: '10px' }}\r\n                                                                    />\r\n                                                                )\r\n                                                            }\r\n                                                            {\r\n                                                                (fieldType === 'select') && (\r\n                                                                    <>\r\n                                                                        <div>{values[thisInputName]}</div>\r\n                                                                        <Select\r\n                                                                            // disabled={isdisabled}\r\n                                                                            value={currentFieldValue}\r\n                                                                            onChange={(e) => {\r\n                                                                                setFieldValue(thisInputName, e.target.value);\r\n                                                                            }}\r\n                                                                            displayEmpty // Enable displayEmpty prop\r\n                                                                            renderValue={(selected) => {\r\n                                                                                if (!selected) {\r\n                                                                                    return <em>--Select--</em>; // Placeholder text\r\n                                                                                }\r\n                                                                                // Render the selected value\r\n                                                                                // const selectedOption = responseData?.productHierarchy.find(\r\n                                                                                //     (option) => option?.sClassID === selected\r\n                                                                                // );\r\n                                                                                return item?.values.length && item?.values[0][selected];\r\n                                                                            }}\r\n                                                                            style={{ height: '37.13px', marginBottom: '1rem', width: \"100%\" }}\r\n                                                                        >\r\n                                                                            <MenuItem id=\"\">Select</MenuItem>\r\n                                                                            {\r\n                                                                                item?.values.length && Object.keys(item?.values[0] || {}).map((vitem) => {\r\n                                                                                    return (\r\n                                                                                        <MenuItem value={vitem} key={shortId.generate()}>{item?.values[0][vitem]}</MenuItem>\r\n                                                                                    )\r\n                                                                                })\r\n                                                                            }\r\n                                                                        </Select>\r\n                                                                    </>\r\n                                                                )\r\n                                                            }\r\n                                                            {\r\n                                                                (fieldType === 'date') && (\r\n                                                                    <>\r\n                                                                        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                                                            <DateTimePicker\r\n                                                                                minDate={dayjs()}\r\n                                                                                views={[\r\n                                                                                    \"year\",\r\n                                                                                    \"month\",\r\n                                                                                    \"day\",\r\n                                                                                    // \"hours\",\r\n                                                                                    // \"minutes\",\r\n                                                                                    // \"seconds\",\r\n                                                                                ]}\r\n                                                                                // value={\r\n                                                                                //     responseData.mcoPropeties[key] &&\r\n                                                                                //         responseData.mcoPropeties[key] !== \"\"\r\n                                                                                //         ? dayjs(responseData.mcoPropeties[key])\r\n                                                                                //         : null\r\n                                                                                // }\r\n                                                                                value={null}\r\n                                                                                onChange={(newValue) => {\r\n                                                                                    if (newValue) {\r\n                                                                                        let getTime = dayjs(newValue.$d).format(\r\n                                                                                            \"MM/DD/YYYY hh:mm:ss A\"\r\n                                                                                        );\r\n                                                                                        if (getTime !== \"Invalid Date\") {\r\n                                                                                            setFieldValue(thisInputName, getTime);\r\n                                                                                        } else if (!newValue) {\r\n                                                                                            setFieldValue(thisInputName, newValue);\r\n                                                                                        }\r\n                                                                                    } else if (!newValue) {\r\n                                                                                        setFieldValue(thisInputName, newValue);\r\n                                                                                    }\r\n                                                                                }}\r\n                                                                                sx={{\r\n                                                                                    padding: '0px!important',\r\n                                                                                    width: '100%!important',\r\n                                                                                    marginBottom: '1rem !important',\r\n                                                                                    '@global': {\r\n                                                                                        'input': {\r\n                                                                                            padding: '8.5px 14px!important',\r\n                                                                                            height: '0.4375em!important',\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                }}\r\n                                                                                slots={{\r\n                                                                                    toolbar: CustomDateTimePickerToolbar,\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        </LocalizationProvider>\r\n                                                                    </>\r\n                                                                )\r\n                                                            }\r\n                                                            {\r\n                                                                (fieldType === 'autocomplete') && (\r\n                                                                    <>\r\n                                                                        {\r\n                                                                            <Autocomplete\r\n                                                                                id={\"autoComplete_\" + fkey}\r\n                                                                                value={filterValue?.label || null}\r\n                                                                                autoHighlight\r\n                                                                                onChange={(e, newValue) => {\r\n                                                                                    const selAutoVal = newValue ? (newValue.key || null) : null;\r\n                                                                                    setFieldValue(thisInputName, selAutoVal);\r\n                                                                                }}\r\n                                                                                onInputChange={(e, newInputValue) => {\r\n                                                                                    //sss\r\n                                                                                }}\r\n                                                                                options={(fieldkey === 'rme') ? RMEList : RSMEList}\r\n                                                                                sx={{ width: '100%', padding: '0px 0px 10px 0px' }}\r\n                                                                                renderInput={(params) => <TextField {...params} />}\r\n                                                                                renderOption={(props, option) => {\r\n                                                                                    return (\r\n                                                                                        <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\r\n                                                                                            {option.label}\r\n                                                                                        </Box>\r\n                                                                                    )\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        }\r\n                                                                    </>\r\n                                                                )\r\n                                                            }\r\n                                                            {\r\n                                                                (fieldType === 'checkbox') && (\r\n                                                                    <>\r\n                                                                        {\r\n                                                                            item?.values.map((vitem, vcinx) => {\r\n                                                                                return (\r\n                                                                                    <div key={shortId.generate()}>\r\n                                                                                        <FormControlLabel\r\n                                                                                            value={vitem}\r\n                                                                                            label={vitem}\r\n                                                                                            labelPlacement=\"end\"\r\n                                                                                            control={<Checkbox />}\r\n                                                                                        />\r\n                                                                                    </div>\r\n                                                                                )\r\n                                                                            })\r\n                                                                        }\r\n                                                                    </>\r\n                                                                )\r\n                                                            }\r\n                                                            {\r\n                                                                (fieldType === 'radio') && (\r\n                                                                    <RadioGroup\r\n                                                                        row\r\n                                                                        name={thisInputName}\r\n                                                                        sx={{ mb: 2 }}\r\n                                                                        value={values[thisInputName] ?? \"\"}\r\n                                                                        onChange={(e) => {\r\n                                                                            setFieldValue(thisInputName, e.target.value);\r\n                                                                        }}\r\n                                                                        style={{ display: 'flex' }}\r\n                                                                    >\r\n                                                                        {\r\n                                                                            item?.values.map((vitem, vrinx) => {\r\n                                                                                return (\r\n                                                                                    <div key={shortId.generate()}>\r\n                                                                                        <FormControlLabel\r\n                                                                                            value={vitem}\r\n                                                                                            label={vitem}\r\n                                                                                            labelPlacement=\"end\"\r\n                                                                                            control={<Radio color=\"secondary\" />}\r\n                                                                                        />\r\n                                                                                    </div>\r\n                                                                                )\r\n                                                                            })\r\n                                                                        }\r\n                                                                    </RadioGroup>\r\n                                                                )\r\n                                                            }\r\n                                                            <div style={{ textAlign: 'left', color: \"red\", position: 'relative', top: '-15px' }}>\r\n                                                                {errors?.[thisInputName]}\r\n                                                            </div>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </div>\r\n                                            )\r\n                                        }) : (\r\n                                            <div>\r\n                                                Form data fields not found.\r\n                                            </div>\r\n                                        )}\r\n                                </div>\r\n                            </form>\r\n                        )\r\n                    }\r\n                }\r\n            </Formik>\r\n            <ConfirmationDialog\r\n                open={isConfirmationOpen}\r\n                handleConfirmation={handleConfirmation}\r\n                handleCancellation={handleCancellation}\r\n            />\r\n\r\n        </>\r\n    );\r\n});\r\n\r\nMassUpdateForm.propTypes = {\r\n    saveMassUpdateFormDetails: PropTypes.func.isRequired\r\n};\r\n\r\nexport default MassUpdateForm;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\nimport { Breadcrumb, SimpleCard } from \"app/components\";\r\nimport { MCOService } from 'services/mcoService';\r\nimport CaDetailTable from \"app/components/McoPages/CaDetailTable\";\r\nimport MassUpdateForm from \"app/components/McoPages/MassUpdateForm\";\r\nimport Loader from 'app/components/Loader';\r\nimport CustomAlertBox from \"app/components/McoPages/CustomAlertBox\";\r\nimport {\r\n    Box,\r\n    styled,\r\n    Grid,\r\n    TextField,\r\n    InputAdornment,\r\n    Button, Link, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle\r\n} from '@mui/material';\r\nimport shortId from 'shortid';\r\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\r\nimport { update_generalValues, resetValues, setUpdatedRoutes } from 'app/redux/actions/MCODetailsAction';\r\nimport { collectEachMcoDetails, validateMCOdetails, MassPromote} from 'app/utils/mcoUtils/caDetailsUtils';\r\nimport {\r\n    fetchRSMEAndRMEDetails,\r\n    prepareFormDataForMassUpdate\r\n} from \"app/utils/mcoUtils/utilities\";\r\nimport SomethingWrong from \"app/components/McoPages/PageError\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./mcoStyles.css\";\r\nimport { exportTableData } from \"app/utils/mcoUtils/caDetailsUtils\";\r\n\r\nconst Container = styled(\"div\")(({ theme }) => ({\r\n    margin: \"30px\",\r\n    [theme.breakpoints.down(\"sm\")]: { margin: \"16px\" },\r\n    \"& .breadcrumb\": {\r\n        marginBottom: \"30px\",\r\n        [theme.breakpoints.down(\"sm\")]: { marginBottom: \"16px\" },\r\n    },\r\n}));\r\n\r\nfunction FormRow(props) {\r\n    return (\r\n        <>\r\n            <Grid item md={3} sm={6} xs={6}>\r\n                {props.label}\r\n                <span className=\"colonSpan\">:</span>\r\n            </Grid >\r\n            <Grid item md={9} sm={6} xs={6}>\r\n                {props.value}\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n\r\nconst CaDetails = () => {\r\n    const {\r\n        isPageHavingIssue,\r\n        caRelatedEachMCODetails,\r\n        massUpdateChanges\r\n    } = useSelector((state) => ({\r\n        isPageHavingIssue: state.mcoDetails.isPageHavingIssue,\r\n        caRelatedEachMCODetails: state.mcoDetails.caRelatedEachMCODetails,\r\n        massUpdateChanges: state.mcoDetails.massUpdateChanges,\r\n    }), shallowEqual);\r\n    const dispatch = useDispatch();\r\n    const [caDetails, setCaDetails] = useState({});\r\n    const [mcolistsArr, setMcolistsArr] = useState([]);\r\n    const [search, setSearch] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [openAlert, setOpenAlert] = useState(false);\r\n    const [openDesc, setOpenDesc] = useState(null);\r\n    const [showForm, setShowForm] = useState(false);\r\n    // table row selection state\r\n    const [selected, setSelected] = useState([]);\r\n    const [selectedData, setSelectedData] = useState([]);\r\n    const [allRoutes, setAllRoutes] = useState([]);\r\n    const [isValidateEnabled, setIsValidateEnabled] = useState(false);\r\n    const[validateRoute,setIsvalidateRoute] = useState({});\r\n\r\n    const params = useParams();\r\n    const childCompRef = useRef({});\r\n    const mcoService = new MCOService();\r\n    const instance = localStorage.getItem('instance');\r\n    console.log(\"mcolistsArr\", mcolistsArr);\r\n    const handleChange = (event) => {\r\n        event.persist();\r\n        const searchArr = event.target.value;\r\n        setSearch(searchArr);\r\n        callSearchApi(searchArr);\r\n    };\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            const searchArr = event.target.value;\r\n            setSearch(searchArr);\r\n            callSearchApi(searchArr);\r\n        }\r\n    };\r\n    const callSearchApi = (searchValues) => {\r\n        try {\r\n            // using api filter\r\n            setIsLoading(true);\r\n            if (searchValues !== '' && searchValues !== null) {\r\n                const findMatchitem = caDetails?.relatedMCOs?.filter((fitem) => {\r\n                    const objstr = JSON.stringify(fitem).toLowerCase();\r\n                    return objstr.includes(searchValues.toLowerCase());\r\n                });\r\n                setMcolistsArr(findMatchitem);\r\n            } else {\r\n                setMcolistsArr(caDetails?.relatedMCOs);\r\n            }\r\n            setIsLoading(false);\r\n        } catch (err) {\r\n            dispatch(update_generalValues({\r\n                isPageHavingIssue: true\r\n            }));\r\n            \r\n        }\r\n    }\r\n\r\n    const autoReleaseButtonFunc = async (action) => {\r\n        alert(\"asd\");\r\n        setIsLoading(true);\r\n        // const selectedMCOs = mcolistsArr.map((n) => n.id);\r\n        //setSelected(selectedMCOs);\r\n        if (!selected.length) {\r\n            setOpenAlert(true);\r\n            setOpenDesc({\r\n                severity: \"error\",\r\n                desc: \"Please select mco's.\",\r\n            });\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        let isMVOcheck = false;\r\n        let isMCOReleased = false;\r\n        const getSelectedMCOList = [];\r\n        for (const sitem of selected) {\r\n            const getSelectedRowData = mcolistsArr?.find(fitem => fitem.id === sitem);\r\n            console.log(\"getSelectedRowData\", getSelectedRowData);\r\n            const statusVal = getSelectedRowData?.current?.toLowerCase();\r\n            const invalidMCOs = selectedData\r\n                .filter(item => new Date(item?.startdate).getFullYear() >= 2049)\r\n                .map(item => item?.name);\r\n\r\n            if (invalidMCOs.length > 0) {\r\n                setOpenAlert(true);\r\n                setOpenDesc({\r\n                    severity: \"error\",\r\n                    desc: `Please set MCO date ${invalidMCOs.join(\", \")} , promotion cannot be processed with default date.`\r\n                });\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n            if (getSelectedRowData?.name?.includes(\"MVO\")) {\r\n                if ([\"create\", \"review\"].includes(statusVal) && selected.length > 1) {\r\n                    isMVOcheck = true;\r\n                }\r\n            }\r\n            if ([\"release\"].includes(statusVal)) {\r\n                isMCOReleased = true;\r\n            }\r\n            getSelectedMCOList.push(getSelectedRowData?.name);\r\n        }\r\n        if (isMVOcheck) {\r\n            setOpenAlert(true);\r\n            setOpenDesc({\r\n                severity: \"error\",\r\n                desc: \"Please release MVO related mco's first and then others.\",\r\n            });\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n        if (isMCOReleased) {\r\n            setOpenAlert(true);\r\n            setOpenDesc({\r\n                severity: \"error\",\r\n                desc: \"Please un-select the released mco.\",\r\n            });\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        const { valid: isAllMCOValid, errDesc: errorDescription } = await validateMCOdetails(getSelectedMCOList,action);\r\n        if (!isAllMCOValid) {\r\n            if (Array.isArray(errorDescription)) {\r\n                let altHtml = [];\r\n                errorDescription?.forEach((citem, cindex) => {\r\n                    altHtml.push(<li key={shortId.generate()}>{citem}</li>)\r\n                });\r\n                setOpenAlert(true);\r\n                setOpenDesc({\r\n                    severity: \"error\",\r\n                    desc: altHtml,\r\n                });\r\n            } else {\r\n                setOpenAlert(true);\r\n                setOpenDesc({\r\n                    severity: \"error\",\r\n                    desc: errorDescription,\r\n                });\r\n            }\r\n        } else {\r\n            await getCARelatedMcoDetails();\r\n\r\n            setOpenAlert(true);\r\n            setOpenDesc({\r\n                severity: \"success\",\r\n                desc: errorDescription,\r\n            });\r\n        }\r\n        setIsLoading(false);\r\n    }\r\n\r\n\r\n\r\n\r\n    const MassPromoteButtonFunc = async (action) => {\r\n        setIsLoading(true);\r\n        if (!selected.length) {\r\n            setOpenAlert(true);\r\n            setOpenDesc({\r\n                severity: \"error\",\r\n                desc: \"Please select mco's.\",\r\n            });\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        let isMVOcheck = false;\r\n        let isMCOReleased = false;\r\n        const getSelectedMCOList = [];\r\n        for (const sitem of selected) {\r\n            const getSelectedRowData = mcolistsArr?.find(fitem => fitem.id === sitem);\r\n            const statusVal = getSelectedRowData?.current?.toLowerCase();\r\n            const currentState = getSelectedRowData?.mcostate?.toLowerCase();\r\n            const invalidMCOs = selectedData\r\n                .filter(item => new Date(item?.startdate).getFullYear() >= 2049)\r\n                .map(item => item?.name);\r\n\r\n            if (invalidMCOs.length > 0) {\r\n                setOpenAlert(true);\r\n                setOpenDesc({\r\n                    severity: \"error\",\r\n                    desc: `Please set MCO date ${invalidMCOs.join(\", \")} , promotion cannot be processed with default date.`\r\n                });\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n            if (currentState !== 'review' && action === 'demote') {\r\n                setOpenAlert(true);\r\n                setOpenDesc({\r\n                    severity: \"error\",\r\n                    desc: `Demote is only available from Review to Create!`\r\n                });\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n            \r\n            if (currentState === 'implemented' && action === 'promote') {\r\n                setOpenAlert(true);\r\n                setOpenDesc({\r\n                    severity: \"error\",\r\n                    desc: `MCOs cannot be promoted as they are already in an implemented state.`\r\n                });\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n            if (getSelectedRowData?.name?.includes(\"MVO\")) {\r\n                if ([\"create\", \"review\"].includes(statusVal) && selected.length > 1) {\r\n                    isMVOcheck = true;\r\n                }\r\n            }\r\n            if ([\"release\"].includes(statusVal)) {\r\n                isMCOReleased = true;\r\n            }\r\n            getSelectedMCOList.push(getSelectedRowData?.name);\r\n\r\n            // Update status logic\r\n            if (statusVal === \"create\" && action === 'promote') {\r\n                getSelectedRowData.current = \"review\";\r\n            } else if (statusVal === \"review\" && action === 'promote') {\r\n                getSelectedRowData.current = \"release\";\r\n            } else if (statusVal === \"review\" && action === 'demote') {\r\n                getSelectedRowData.current = \"create\";\r\n            }\r\n        }\r\n\r\n        if (isMVOcheck) {\r\n            setOpenAlert(true);\r\n            setOpenDesc({\r\n                severity: \"error\",\r\n                desc: \"Please release MVO related mco's first and then others.\",\r\n            });\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n        if (isMCOReleased) {\r\n            setOpenAlert(true);\r\n            setOpenDesc({\r\n                severity: \"error\",\r\n                desc: \"Please un-select the released mco.\",\r\n            });\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n        const { valid: isAllMCOValid, errDesc: errorDescription } = await MassPromote(getSelectedMCOList, action);\r\n        if (!isAllMCOValid) {\r\n            if (Array.isArray(errorDescription)) {\r\n                let altHtml = [];\r\n                errorDescription?.forEach((citem, cindex) => {\r\n                    altHtml.push(<li key={shortId.generate()}>{citem}</li>)\r\n                });\r\n                setOpenAlert(true);\r\n                setOpenDesc({\r\n                    severity: \"error\",\r\n                    desc: altHtml,\r\n                });\r\n            } else {\r\n                setOpenAlert(true);\r\n                setOpenDesc({\r\n                    severity: \"error\",\r\n                    desc: errorDescription,\r\n                });\r\n            }\r\n        } else {\r\n            await getCARelatedMcoDetails();\r\n\r\n            setOpenAlert(true);\r\n            setOpenDesc({\r\n                severity: \"success\",\r\n                desc: errorDescription,\r\n            });\r\n        }\r\n        setIsLoading(false);\r\n    }\r\n\r\n    const getCARelatedMcoDetails = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            await dispatch(resetValues());\r\n            if(instance === 'onPrem')\r\n            await fetchRSMEAndRMEDetails();\r\n\r\n            await mcoService.getCARelatedMco(params).then(async (result) => {\r\n                if (Object.keys(result).length) {\r\n                    if (Array.isArray(result?.relatedMCOs) && result?.relatedMCOs.length) {\r\n                        setCaDetails(result);\r\n                         // Extract the first MCO (index 0)\r\n                    const mcoList = [result.relatedMCOs[0]];\r\n                     // Get the title from the first MCO\r\n                     const mcoTitle = mcoList[0]?.title;\r\n                     // Extract routes from index 1's `routeProperties`\r\n                    const allExtractedRoutes  = result.relatedMCOs[1]?.routeProperties?.map(route => ({\r\n                        ...route,\r\n                        type: \"Route\",\r\n                        parentMcoId: result.relatedMCOs[0]?.id, // Attach to parent MCO\r\n                    })) || [];\r\n                    setAllRoutes(allExtractedRoutes);\r\n                    // Filter routes that have the same title as the MCO\r\n                    const matchingRoutes = allExtractedRoutes.filter(route => route.title?.startsWith(mcoTitle));\r\n                    //  Compute if validation button should be enabled\r\n                    const validateEnabled = allExtractedRoutes.some(route =>\r\n                        route.title.includes(\"Prerequisite\") && route.mcostate !== \"Completed\"\r\n                    );\r\n                    setIsValidateEnabled(validateEnabled);\r\n\r\n                    // **Find the  route that matches our condition**\r\n                    const validateRoute = allExtractedRoutes.find(route =>\r\n                        route.title.includes(\"Prerequisite\") && route.mcostate !== \"Completed\"\r\n                    );\r\n                    setIsvalidateRoute(validateRoute);\r\n\r\n                    // Attach plant type only to the correct route\r\n                    const updatedRoutes = matchingRoutes.map(route => {\r\n                        const nameParts = route.title?.split(\"-\");\r\n                        const extractedPlantType = (\r\n                            nameParts.length > 2 && \r\n                            nameParts[2] !== mcoTitle.split(\"-\")[1]\r\n                        ) \r\n                        ? nameParts[nameParts.length - 1]  \r\n                        : \"\"; // Default if no numeric suffix is found\r\n                        return {\r\n                            ...route,\r\n                            plantType: extractedPlantType // Attach extracted plant type to each route\r\n                        };\r\n                    });\r\n                    console.log(\"updatedRoutes\", updatedRoutes);\r\n                    dispatch(setUpdatedRoutes(updatedRoutes));\r\n                        // Combine MCOs and Routes into a single list\r\n                    const filteredList = [...mcoList, ...updatedRoutes];\r\n                    setMcolistsArr(filteredList);\r\n                         // Extract only MCO names and IDs for further processing\r\n                        const getMCONameAndIds = result?.relatedMCOs?.map((mitem) => {\r\n                            let mcoNameIds = {\r\n                                name: mitem.name,   \r\n                                id: mitem.id\r\n                            };\r\n                            \r\n                            return mcoNameIds;\r\n                        })\r\n                        \r\n                        await collectEachMcoDetails(getMCONameAndIds);\r\n                    } else {\r\n                        setOpenAlert(true);\r\n                        setOpenDesc({\r\n                            severity: \"error\",\r\n                            desc: \"No result found!\",\r\n                        });\r\n                    }\r\n                } else {\r\n                    setOpenAlert(true);\r\n                    setOpenDesc({\r\n                        severity: \"error\",\r\n                        desc: result,\r\n                    });\r\n                }\r\n            });\r\n            setIsLoading(false);\r\n        } catch (err) {\r\n            dispatch(update_generalValues({\r\n                isPageHavingIssue: true\r\n            }));\r\n        }\r\n    }\r\n\r\n    \r\n    const saveMassUpdateFormDetails = async (formvalue) => {\r\n        const updatedValues = {\r\n            ...massUpdateChanges, // Keep previous values\r\n            [formvalue?.PropertyFieldName]: formvalue?.PropertyFieldValue // Update with new values\r\n        };\r\n\r\n        dispatch(update_generalValues({\r\n            massUpdateChanges: updatedValues\r\n        }));\r\n        setShowForm(false);\r\n    }\r\n    const saveAlltheMassUpdateChanges = async () => {\r\n        setShowForm(false);\r\n        setIsLoading(true);\r\n        if ((massUpdateChanges && Object?.keys(massUpdateChanges)?.length) && selected?.length) {\r\n            let preparePayload = {};\r\n            const data = prepareFormDataForMassUpdate(massUpdateChanges);\r\n            for (const sitem of selected) {\r\n                preparePayload[sitem] = data;\r\n            }\r\n            setIsLoading(true);\r\n\r\n            await mcoService.updateMCOObjects(preparePayload).then(async (result) => {\r\n                // Separate objects with and without error messages\r\n                const errorMessages = [];\r\n                const successNames = [];\r\n                const errorNames = [];\r\n\r\n                Object.values(result).forEach(item => {\r\n                    if (item.errorMsg) {\r\n                        errorMessages.push(item.errorMsg);\r\n                        errorNames.push(item.name);\r\n                    } else {\r\n                        successNames.push(item.name);\r\n                    }\r\n                });\r\n\r\n                if (errorMessages.length > 0) {\r\n                    // Display the first error message found and list of successful updates\r\n                    await getCARelatedMcoDetails();\r\n                    setOpenAlert(true);\r\n                    setOpenDesc({\r\n                        severity: \"warning\",\r\n                        desc: `${errorNames.join(', ')} ${errorMessages[0]}${successNames.length > 0 ? `. Updated successfully for: ${successNames.join(', ')}` : ''}`,\r\n                    });\r\n                    return; // Return early if there is an error\r\n                } else {\r\n                    await getCARelatedMcoDetails();\r\n\r\n                    setOpenAlert(true);\r\n                    setOpenDesc({\r\n                        severity: \"success\",\r\n                        desc: \"Mass update changes updated successfully.\",\r\n                    });\r\n                }\r\n            }).finally(() => {\r\n                setIsLoading(false);\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleValidateClick = async () => {\r\n        if (isValidateEnabled) {\r\n          try {\r\n            const taskList = await mcoService.getTaskList(validateRoute.id);\r\n            let taskId = null;\r\n            if (Array.isArray(taskList) && taskList.length > 0) {\r\n              taskId = taskList[0].id; // Just take the first one\r\n            } else if (typeof taskList === \"string\") {\r\n              taskId = taskList;\r\n            }\r\n      \r\n            if (taskId) {\r\n              const approvalResponse = await mcoService.taskApproval(taskId);\r\n              if (approvalResponse?.success) {\r\n                setOpenAlert(true);\r\n                setOpenDesc({\r\n                  severity: \"success\",\r\n                  desc: \" Task successfully approved!\",\r\n                });\r\n              }\r\n      \r\n              await getCARelatedMcoDetails();\r\n            }\r\n          } catch (error) {\r\n            console.error(\" Task Approval Error\", error);\r\n            setOpenAlert(true);\r\n            setOpenDesc({\r\n              severity: \"error\",\r\n              desc: error?.response?.data?.details?.Response?.ErrorMessage || \"Approval failed\",\r\n            });\r\n          }\r\n        }\r\n      };\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setIsLoading(true);\r\n            getCARelatedMcoDetails();\r\n        } catch (err) {\r\n            setIsLoading(false);\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Container>\r\n            {\r\n                (!isPageHavingIssue) ? (<>\r\n                    <Box className=\"breadcrumb\">\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item md={6} sm={12} xs={12}>\r\n                                <Breadcrumb routeSegments={[{ name: \"CA / MECO Details\" }]} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                    <SimpleCard>\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid container spacing={2} alignItems=\"center\" className=\"caDetailsContainer\">\r\n                                {\r\n                                    (Object.keys(caDetails).length) ? (\r\n                                        <>\r\n                                            <FormRow label={\"Name\"} value={caDetails.name} />\r\n                                            <FormRow label={\"State\"} value={caDetails.caState} />\r\n                                            <FormRow label={\"Description\"} value={caDetails.description} />\r\n                                        </>\r\n                                    ) : (\r\n                                        <></>\r\n                                    )\r\n                                }\r\n                            </Grid>\r\n                            <Grid item md={12} sm={12} xs={12}>\r\n                                <h4>{\"Related MCO's:\"}</h4>\r\n                            </Grid>\r\n                            <Grid item md={3} sm={6} xs={12} className=\"font-medium\">\r\n                                <TextField\r\n                                    type=\"text\"\r\n                                    name=\"search\"\r\n                                    size=\"small\"\r\n                                    onChange={handleChange}\r\n                                    onKeyDown={handleKeyDown}\r\n                                    value={search || \"\"}\r\n                                    style={{ width: '100%' }}\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                *\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={9} sm={6} xs={12}>\r\n                                <Button variant=\"contained\" onClick={() => { callSearchApi(search) }}>Search</Button>\r\n\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    onClick={getCARelatedMcoDetails}\r\n                                    // disabled={!selected.length}\r\n                                    style={{ float: \"right\" }}>\r\n                                    Refresh\r\n                                </Button>\r\n\r\n                                {\r\n                                    (massUpdateChanges && Object.keys(massUpdateChanges)?.length) ? (\r\n                                        <Button variant=\"contained\" onClick={saveAlltheMassUpdateChanges} style={{ float: \"right\", marginRight: \"15px\" }}>Save</Button>\r\n                                    ) : (\r\n                                        <>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                onClick={()=>autoReleaseButtonFunc('auto-release')}\r\n                                                disabled={!selected.length || (selectedData && (selectedData[0].mcostate === \"Release\" || selectedData[0].mcostate === \"Implemented\"))}                                                style={{ float: \"right\", marginRight: \"15px\" }}>\r\n                                                Auto Release\r\n                                            </Button>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                onClick={()=>MassPromoteButtonFunc('promote')}\r\n                                                disabled={!selected.length}\r\n                                                style={{ float: \"right\", marginRight: \"15px\" }}>\r\n                                                Mass Promote\r\n                                            </Button>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                onClick={()=>MassPromoteButtonFunc('demote')}\r\n                                                disabled={!selected.length}\r\n                                                style={{ float: \"right\", marginRight: \"15px\" }}>\r\n                                                Mass Demote\r\n                                            </Button>\r\n                                        </>\r\n                                    )\r\n                                }\r\n                             \r\n                                <Button variant=\"contained\" onClick={() => { exportTableData(mcolistsArr, \"caMCO\") }} style={{ float: \"right\", marginRight: \"15px\" }}>Export</Button>\r\n                                <Button variant=\"contained\" disabled={!isValidateEnabled}    onClick={handleValidateClick} style={{ float: \"right\", marginRight: \"15px\" }}>Validate</Button>\r\n\r\n                                <Link component=\"button\" underline=\"none\" disabled={!selected?.length}\r\n                                    onClick={() => {\r\n                                        setShowForm(true);\r\n                                    }}\r\n                                    style={{ float: \"right\", padding: \"6px 40px 5px 10px\", color: !selected?.length ? \"grey\" : \"#1976d2\" }}\r\n                                >\r\n                                    Mass Update\r\n                                </Link>\r\n                                \r\n                            </Grid>\r\n                            <Grid item md={12} sm={12} xs={12}>\r\n                                <CaDetailTable mcolistsArr={mcolistsArr || []} setSelected={setSelected} selected={selected} caRelatedEachMCODetails={caRelatedEachMCODetails} selectedData={selectedData}\r\n                                    setSelectedData={setSelectedData} />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {(openDesc) ? (\r\n                            <CustomAlertBox openAlert={openAlert} openDesc={openDesc} setOpenAlert={setOpenAlert} />\r\n                        ) : (<></>)}\r\n                        {isLoading ? (\r\n                            <div style={{ textAlign: 'center' }}>\r\n                                <Loader show={isLoading} />\r\n                            </div>\r\n                        ) : <></>}\r\n\r\n\r\n                        {/* MODAL BOX */}\r\n                        <Dialog\r\n                            open={showForm}\r\n                            onClose={() => { setShowForm(false) }}\r\n                            scroll={'paper'}\r\n                            aria-labelledby=\"scroll-dialog-title\"\r\n                            aria-describedby=\"scroll-dialog-description\"\r\n                            maxWidth={'md'}\r\n                            fullWidth={true}\r\n                        >\r\n                            <DialogTitle id=\"scroll-dialog-title\">Mass update form</DialogTitle>\r\n                            <DialogContent dividers={true}>\r\n                                <DialogContentText id=\"scroll-dialog-description\" tabIndex={-1}>\r\n                                    <MassUpdateForm ref={childCompRef} saveMassUpdateFormDetails={saveMassUpdateFormDetails} />\r\n                                </DialogContentText>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={() => { setShowForm(false) }}>Cancel</Button>\r\n                                <Button onClick={() => { childCompRef.current.callsubmitForm(); }}>Save</Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                    </SimpleCard>\r\n                </>) : (<SomethingWrong />)\r\n            }\r\n        </Container>\r\n    );\r\n};\r\n\r\nFormRow.propTypes = {\r\n    label: PropTypes.node.isRequired,\r\n    value: PropTypes.node.isRequired\r\n};\r\n\r\nexport default CaDetails;"],"names":["props","setOpenView","setView","onChange","value","other","_jsxs","Box","sx","display","flexDirection","alignItems","children","_jsx","DateTimePickerToolbar","Button","onClick","handleTodayButtonClick","today","dayjs","variant","size","style","margin","position","bottom","left","_ref","title","_Fragment","Tooltip","justifyContent","top","width","zIndex","AutorenewIcon","fontSize","color","animation","height","StyledTable","styled","Table","whiteSpace","paddingLeft","paddingRight","textTransform","displayERPValue","val","_val$ERPstatus","ERPstatus","iconColorCodes","allCaMCODetails","caLifeCycleData","useSelector","state","mcoDetails","shallowEqual","mcolistsArr","selected","setSelected","caRelatedEachMCODetails","selectedData","setSelectedData","page","setPage","useState","rowsPerPage","setRowsPerPage","mcolists","setMcolists","erpStatusReasonDialogBox","setErpStatusReasonDialogBox","selectedMCO","setSelectedMCO","showInprogressColumn","setShowInprogressColumn","instance","localStorage","getItem","useEffect","mcoFilterList","length","slice","find","eitems","_caLifeCycleData$eite","name","promoted","newSelectedData","map","id","item","overflow","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","checked","event","target","mvoItems","filter","n","includes","otherItems","newSelected","inputProps","align","wordWrap","TableBody","subscriber","index","_Object$keys","_caLifeCycleData$subs","_Object$keys2","_currentMCODetails","mcoName","isItemSelected","indexOf","labelId","caMCOLists","currentMCODetails","Object","keys","handleClick","selectedIndex","selectedItem","concat","Link","to","type","parentMcoId","plantType","setItem","removeItem","RotatingInProgressIcon","businessUnit","mcostate","plantName","startdate","IconButton","e","stopPropagation","theme","_currentMCODetails2","_currentMCODetails2$E","_currentMCODetails3","_currentMCODetails3$E","right","toLowerCase","VisibilityIcon","palette","grey","VisibilityOffIcon","rme","rsme","shortId","colSpan","textAlign","TablePagination","px","component","count","onPageChange","handleChangePage","_","newPage","rowsPerPageOptions","onRowsPerPageChange","nextIconButtonProps","backIconButtonProps","ErpStatusReasonDialogBox","updateERPStatusReason","formData","ConfirmationDialog","open","handleConfirmation","handleCancellation","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","forwardRef","ref","RSMEList","RMEList","formAllData","setFormAllData","formValues","setFormValues","validFormValues","setValidFormValues","yubformData","setYubformData","isConfirmationOpen","setIsConfirmationOpen","yupObj","formInitaialValues","forEach","thisFieldName","mandatory","Yup","required","defaultValues","partsSchema","shape","labelArr","description","Formik","initialValues","onSubmit","enableReinitialize","validationSchema","validateOnChange","validateOnBlur","_ref2","values","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setSubmitting","setFieldValue","validateForm","isValid","submitForm","setTimeout","async","useImperativeHandle","callsubmitForm","fkey","_formAllData$","_filterValue","_values$thisInputName","thisInputName","currentFieldValue","fieldType","inputType","fieldkey","filterValue","_ref3","rmeFilter","key","className","Grid","container","spacing","md","sm","xs","TextField","fullWidth","marginBottom","Select","displayEmpty","renderValue","MenuItem","vitem","LocalizationProvider","dateAdapter","AdapterDayjs","DateTimePicker","minDate","views","newValue","getTime","$d","format","slots","toolbar","CustomDateTimePickerToolbar","Autocomplete","label","autoHighlight","selAutoVal","onInputChange","newInputValue","options","renderInput","params","renderOption","option","mr","flexShrink","vcinx","FormControlLabel","labelPlacement","control","RadioGroup","row","mb","vrinx","Radio","saveMassUpdateFormDetails","Container","breakpoints","down","FormRow","CaDetails","isPageHavingIssue","massUpdateChanges","dispatch","useDispatch","caDetails","setCaDetails","setMcolistsArr","search","setSearch","isLoading","setIsLoading","openAlert","setOpenAlert","openDesc","setOpenDesc","showForm","setShowForm","allRoutes","setAllRoutes","isValidateEnabled","setIsValidateEnabled","validateRoute","setIsvalidateRoute","useParams","childCompRef","useRef","mcoService","MCOService","console","log","callSearchApi","searchValues","_caDetails$relatedMCO","findMatchitem","relatedMCOs","fitem","JSON","stringify","err","update_generalValues","MassPromoteButtonFunc","severity","desc","isMVOcheck","isMCOReleased","getSelectedMCOList","sitem","_getSelectedRowData$c2","_getSelectedRowData$m","_getSelectedRowData$n2","getSelectedRowData","statusVal","current","currentState","invalidMCOs","Date","getFullYear","join","action","push","valid","isAllMCOValid","errDesc","errorDescription","MassPromote","getCARelatedMcoDetails","Array","isArray","altHtml","citem","cindex","resetValues","fetchRSMEAndRMEDetails","getCARelatedMco","then","result","_mcoList$","_result$relatedMCOs$","_result$relatedMCOs$$","_result$relatedMCOs","mcoList","mcoTitle","allExtractedRoutes","routeProperties","route","_result$relatedMCOs$2","matchingRoutes","_route$title","startsWith","validateEnabled","some","updatedRoutes","_route$title2","nameParts","split","extractedPlantType","setUpdatedRoutes","filteredList","getMCONameAndIds","mitem","collectEachMcoDetails","SomethingWrong","Breadcrumb","routeSegments","SimpleCard","caState","persist","searchArr","onKeyDown","InputProps","endAdornment","InputAdornment","float","preparePayload","data","prepareFormDataForMassUpdate","updateMCOObjects","errorMessages","successNames","errorNames","errorMsg","finally","marginRight","alert","_getSelectedRowData$c","_getSelectedRowData$n","validateMCOdetails","autoReleaseButtonFunc","disabled","exportTableData","taskList","getTaskList","taskId","approvalResponse","taskApproval","success","error","_error$response","_error$response$data","_error$response$data$","_error$response$data$2","response","details","Response","ErrorMessage","underline","CaDetailTable","CustomAlertBox","Loader","show","onClose","scroll","maxWidth","dividers","tabIndex","MassUpdateForm","updatedValues","formvalue","PropertyFieldName","PropertyFieldValue"],"sourceRoot":""}